{"jsonrpc":"2.0","id":1,"result":{"content":[{"type":"text","text":"{\n  \"file_path\": \"/etc/debconf.conf\",\n  \"metadata\": {\n    \"file_path\": \"/etc/debconf.conf\",\n    \"file_name\": \"debconf.conf\",\n    \"file_size\": 2969,\n    \"created\": \"2025-05-30T23:42:20.047733032Z\",\n    \"modified\": \"2023-01-08T21:50:51Z\",\n    \"accessed\": \"2023-01-08T21:50:51Z\",\n    \"permissions\": \"644\",\n    \"is_executable\": false,\n    \"mime_type\": \"application/octet-stream\",\n    \"hashes\": {\n      \"md5\": \"8c0619be413824f1fc7698cee0f23811\",\n      \"sha256\": \"fe7e76d4162e80e0bc8c24bc638c56ae92c07a80db750cbf0a87e0904e143f4e\",\n      \"sha512\": \"e0bf288a8325f720d55f9dfeb6f6df197e464fd921f8ab99b0466f2975b2b9505e52f8f6860686e1b5eaf36019dc6f75cfa7ee07a77a2e5a23fd2d2795745d6e\",\n      \"blake3\": \"454be9147f9aff28b6e33adb4d60d274be68ef5dccf274d35985313939497f62\"\n    },\n    \"binary_info\": null,\n    \"extracted_strings\": null,\n    \"signature_info\": null,\n    \"hex_dump\": null,\n    \"owner_uid\": 0,\n    \"group_gid\": 0\n  },\n  \"hashes\": {\n    \"md5\": \"8c0619be413824f1fc7698cee0f23811\",\n    \"sha256\": \"fe7e76d4162e80e0bc8c24bc638c56ae92c07a80db750cbf0a87e0904e143f4e\",\n    \"sha512\": \"e0bf288a8325f720d55f9dfeb6f6df197e464fd921f8ab99b0466f2975b2b9505e52f8f6860686e1b5eaf36019dc6f75cfa7ee07a77a2e5a23fd2d2795745d6e\",\n    \"blake3\": \"454be9147f9aff28b6e33adb4d60d274be68ef5dccf274d35985313939497f62\"\n  },\n  \"strings\": [\n    \"# This is the main config file for debconf. It tells debconf where to\",\n    \"# store data. The format of this file is a set of stanzas. Each stanza\",\n    \"# except the first sets up a database for debconf to use. For details, see\",\n    \"# debconf.conf(5) (in the debconf-doc package).\",\n    \"# So first things first. This first stanza gives the names of two databases.\",\n    \"# Debconf will use this database to store the data you enter into it,\",\n    \"# and some other dynamic data.\",\n    \"Config: configdb\",\n    \"# Debconf will use this database to store static template data.\",\n    \"Templates: templatedb\",\n    \"# World-readable, and accepts everything but passwords.\",\n    \"Name: config\",\n    \"Driver: File\",\n    \"Mode: 644\",\n    \"Reject-Type: password\",\n    \"Filename: /var/cache/debconf/config.dat\",\n    \"# Not world readable (the default), and accepts only passwords.\",\n    \"Name: passwords\",\n    \"Driver: File\",\n    \"Mode: 600\",\n    \"Backup: false\",\n    \"Required: false\",\n    \"Accept-Type: password\",\n    \"Filename: /var/cache/debconf/passwords.dat\",\n    \"# Set up the configdb database. By default, it consists of a stack of two\",\n    \"# databases, one to hold passwords and one for everything else.\",\n    \"Name: configdb\",\n    \"Driver: Stack\",\n    \"Stack: config, passwords\",\n    \"# Set up the templatedb database, which is a single flat text file\",\n    \"# by default.\",\n    \"Name: templatedb\",\n    \"Driver: File\",\n    \"Mode: 644\",\n    \"Filename: /var/cache/debconf/templates.dat\",\n    \"# Well that was pretty straightforward, and it will be enough for most\",\n    \"# people's needs, but debconf's database drivers can be used to do much\",\n    \"# more interesting things. For example, suppose you want to use config \",\n    \"# data from another host, which is mounted over nfs or perhaps the database\",\n    \"# is accessed via LDAP. You don't want to write to the remote debconf database,\",\n    \"# just read from it, so you still need a local database for local changes.\",\n    \"# A remote NFS mounted database, read-only. It is optional; if debconf\",\n    \"# fails to use it it will not abort.\",\n    \"#Name: remotedb\",\n    \"#Driver: DirTree\",\n    \"#Directory: /mnt/otherhost/var/cache/debconf/config\",\n    \"#Readonly: true\",\n    \"#Required: false\",\n    \"# A remote LDAP database. It is also read-only. The password is really\",\n    \"# only necessary if the database is not accessible anonymously.\",\n    \"# Option KeyByKey instructs the backend to retrieve keys from the LDAP\",\n    \"# server individually (when they are requested), instead of loading all\",\n    \"# keys at startup. The default is 0, and should only be enabled if you\",\n    \"# want to track accesses to individual keys on the LDAP server side.\",\n    \"#Name: remotedb\",\n    \"#Driver: LDAP\",\n    \"#Server: remotehost\",\n    \"#BaseDN: cn=debconf,dc=domain,dc=com\",\n    \"#BindDN: uid=admin,dc=domain,dc=com\",\n    \"#BindPasswd: secret\",\n    \"#KeyByKey: 0\",\n    \"# A stack consisting of two databases. Values will be read from\",\n    \"# the first database in the stack to contain a value. In this example,\",\n    \"# writes always go to the first database.\",\n    \"#Name: fulldb\",\n    \"#Driver: Stack\",\n    \"#Stack: configdb, remotedb\",\n    \"# In this example, we'd use Config: fulldb at the top of the file\",\n    \"# to make it use the combination of the databases.\",\n    \"# Even more complex and interesting setups are possible, see the \",\n    \"# debconf.conf(5) page for details.\"\n  ],\n  \"hex_dump\": null,\n  \"binary_info\": null,\n  \"signatures\": null,\n  \"symbols\": null,\n  \"control_flow\": null,\n  \"vulnerabilities\": null,\n  \"code_quality\": null,\n  \"dependencies\": null,\n  \"entropy\": null,\n  \"disassembly\": null,\n  \"threats\": null,\n  \"behavioral\": null,\n  \"yara_indicators\": null\n}"}]}}
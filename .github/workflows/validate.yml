name: Validate Workflows

on:
  pull_request:
    paths:
      - '.github/workflows/**'
  push:
    paths:
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  validate-workflows:
    name: Validate Workflow Files
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
      
      - name: Install workflow validation tools
        run: |
          pip install yamllint
          curl -sSL https://github.com/rhymond/go-github-selfupdate/releases/latest/download/actionlint_linux_amd64.tar.gz | tar xz
          sudo mv actionlint /usr/local/bin/
      
      - name: Validate YAML syntax
        run: |
          for file in .github/workflows/*.yml .github/workflows/*.yaml; do
            if [ -f "$file" ]; then
              echo "Validating $file..."
              yamllint "$file"
            fi
          done
      
      - name: Validate GitHub Actions workflow syntax
        run: |
          for file in .github/workflows/*.yml .github/workflows/*.yaml; do
            if [ -f "$file" ]; then
              echo "Checking GitHub Actions syntax for $file..."
              actionlint "$file"
            fi
          done
      
      - name: Validate Dockerfile
        run: |
          docker buildx build --check .
      
      - name: Check for required files
        run: |
          echo "Checking for required workflow files..."
          test -f .github/workflows/release.yml && echo "✓ Release workflow found"
          test -f .github/workflows/docker.yml && echo "✓ Docker workflow found"
          test -f .github/workflows/ci.yml && echo "✓ CI workflow found"
          test -f .github/workflows/README.md && echo "✓ Workflow documentation found"
      
      - name: Validate release workflow structure
        run: |
          echo "Validating release.yml structure..."
          python3 -c "
          import yaml
          with open('.github/workflows/release.yml') as f:
              data = yaml.safe_load(f)
          
          # Check required jobs
          required_jobs = ['create-release', 'build-and-upload', 'docker-release']
          for job in required_jobs:
              assert job in data['jobs'], f'Missing job: {job}'
          
          # Check platforms
          matrix = data['jobs']['build-and-upload']['strategy']['matrix']['include']
          platforms = [item['target'] for item in matrix]
          expected = ['x86_64-unknown-linux-gnu', 'aarch64-unknown-linux-gnu', 
                     'x86_64-apple-darwin', 'aarch64-apple-darwin', 'x86_64-pc-windows-msvc']
          for platform in expected:
              assert platform in platforms, f'Missing platform: {platform}'
          
          print('✓ Release workflow structure is valid')
          "
      
      - name: Validate Docker workflow structure
        run: |
          echo "Validating docker.yml structure..."
          python3 -c "
          import yaml
          with open('.github/workflows/docker.yml') as f:
              data = yaml.safe_load(f)
          
          # Check required jobs
          required_jobs = ['docker-build-test']
          for job in required_jobs:
              assert job in data['jobs'], f'Missing job: {job}'
          
          # Check triggers
          assert 'push' in data['on'], 'Missing push trigger'
          assert 'pull_request' in data['on'], 'Missing PR trigger'
          
          print('✓ Docker workflow structure is valid')
          "

  test-docker-build:
    name: Test Docker Build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2  # v3.10.0
      
      - name: Test Docker build (no push)
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83  # v6.18.0
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: test-build:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
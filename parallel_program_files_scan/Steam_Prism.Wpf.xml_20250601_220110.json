{"jsonrpc":"2.0","id":1,"result":{"content":[{"type":"text","text":"{\n  \"file_path\": \"/windows/Program Files (x86)/Steam/steamapps/common/EVGA PrecisionX/Library/Prism.Wpf.xml\",\n  \"metadata\": {\n    \"file_path\": \"/windows/Program Files (x86)/Steam/steamapps/common/EVGA PrecisionX/Library/Prism.Wpf.xml\",\n    \"file_name\": \"Prism.Wpf.xml\",\n    \"file_size\": 286758,\n    \"created\": \"2023-03-21T18:54:08.188963700Z\",\n    \"modified\": \"2023-03-21T18:54:08.188963700Z\",\n    \"accessed\": \"2025-05-30T11:23:18.660371Z\",\n    \"permissions\": \"755\",\n    \"is_executable\": true,\n    \"mime_type\": \"application/octet-stream\",\n    \"hashes\": {\n      \"md5\": \"2c805ad089af83bf1ccaab8f37d8aca4\",\n      \"sha256\": \"8cdd07d9d112c1b331246cdfc9de1a19271e35926c3d68f51abaaa52341cd195\",\n      \"sha512\": \"d285669adbeedfd26b2460fbc712c3f17f100f0252d4c3b7d2e16554448d157e4d4b12327ff1c94e604b98706bc0b29bc113cfc3377d9f01ad8a4fc4a682d240\",\n      \"blake3\": \"207aad9747fdc2e81d15162c54338bcfddd64c335a00b69a467218aa2cc4268e\"\n    },\n    \"binary_info\": null,\n    \"extracted_strings\": null,\n    \"signature_info\": null,\n    \"hex_dump\": null,\n    \"owner_uid\": 1000,\n    \"group_gid\": 1000\n  },\n  \"hashes\": {\n    \"md5\": \"2c805ad089af83bf1ccaab8f37d8aca4\",\n    \"sha256\": \"8cdd07d9d112c1b331246cdfc9de1a19271e35926c3d68f51abaaa52341cd195\",\n    \"sha512\": \"d285669adbeedfd26b2460fbc712c3f17f100f0252d4c3b7d2e16554448d157e4d4b12327ff1c94e604b98706bc0b29bc113cfc3377d9f01ad8a4fc4a682d240\",\n    \"blake3\": \"207aad9747fdc2e81d15162c54338bcfddd64c335a00b69a467218aa2cc4268e\"\n  },\n  \"strings\": [\n    \"<?xml version=\\\"1.0\\\"?>\",\n    \"<doc>\",\n    \"    <assembly>\",\n    \"        <name>Prism.Wpf</name>\",\n    \"    </assembly>\",\n    \"    <members>\",\n    \"        <member name=\\\"T:Prism.Bootstrapper\\\">\",\n    \"            <summary>\",\n    \"            Base class that provides a basic bootstrapping sequence and hooks\",\n    \"            that specific implementations can override\",\n    \"            </summary>\",\n    \"            <remarks>\",\n    \"            This class must be overridden to provide application specific configuration.\",\n    \"            </remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Bootstrapper.Logger\\\">\",\n    \"            <summary>\",\n    \"            Gets the <see cref=\\\"T:Prism.Logging.ILoggerFacade\\\"/> for the application.\",\n    \"            </summary>\",\n    \"            <value>A <see cref=\\\"T:Prism.Logging.ILoggerFacade\\\"/> instance.</value>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Bootstrapper.ModuleCatalog\\\">\",\n    \"            <summary>\",\n    \"            Gets the default <see cref=\\\"T:Prism.Modularity.IModuleCatalog\\\"/> for the application.\",\n    \"            </summary>\",\n    \"            <value>The default <see cref=\\\"T:Prism.Modularity.IModuleCatalog\\\"/> instance.</value>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Bootstrapper.Shell\\\">\",\n    \"            <summary>\",\n    \"            Gets the shell user interface\",\n    \"            </summary>\",\n    \"            <value>The shell user interface.</value>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Bootstrapper.CreateContainerExtension\\\">\",\n    \"            <summary>\",\n    \"            Creates the container extension used by Prism.\",\n    \"            </summary>\",\n    \"            <returns>The container extension</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Bootstrapper.CreateLogger\\\">\",\n    \"            <summary>\",\n    \"            Create the <see cref=\\\"T:Prism.Logging.ILoggerFacade\\\" /> used by the bootstrapper.\",\n    \"            </summary>\",\n    \"            <remarks>\",\n    \"            The base implementation returns a new TextLogger.\",\n    \"            </remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Bootstrapper.Run\\\">\",\n    \"            <summary>\",\n    \"            Runs the bootstrapper process.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Bootstrapper.CreateModuleCatalog\\\">\",\n    \"            <summary>\",\n    \"            Creates the <see cref=\\\"T:Prism.Modularity.IModuleCatalog\\\"/> used by Prism.\",\n    \"            </summary>\",\n    \"             <remarks>\",\n    \"            The base implementation returns a new ModuleCatalog.\",\n    \"            </remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Bootstrapper.ConfigureModuleCatalog\\\">\",\n    \"            <summary>\",\n    \"            Configures the <see cref=\\\"T:Prism.Modularity.IModuleCatalog\\\"/> used by Prism.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Bootstrapper.ConfigureViewModelLocator\\\">\",\n    \"            <summary>\",\n    \"            Configures the <see cref=\\\"T:Prism.Mvvm.ViewModelLocator\\\"/> used by Prism.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Bootstrapper.RegisterFrameworkExceptionTypes\\\">\",\n    \"            <summary>\",\n    \"            Registers the <see cref=\\\"T:System.Type\\\"/>s of the Exceptions that are not considered \",\n    \"            root exceptions by the <see cref=\\\"T:System.ExceptionExtensions\\\"/>.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Bootstrapper.InitializeModules\\\">\",\n    \"            <summary>\",\n    \"            Initializes the modules. May be overwritten in a derived class to use a custom Modules Catalog\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Bootstrapper.ConfigureRegionAdapterMappings\\\">\",\n    \"            <summary>\",\n    \"            Configures the default region adapter mappings to use in the application, in order\",\n    \"            to adapt UI controls defined in XAML to use a region and register it automatically.\",\n    \"            May be overwritten in a derived class to add specific mappings required by the application.\",\n    \"            </summary>\",\n    \"            <returns>The <see cref=\\\"T:Prism.Regions.RegionAdapterMappings\\\"/> instance containing all the mappings.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Bootstrapper.ConfigureDefaultRegionBehaviors\\\">\",\n    \"            <summary>\",\n    \"            Configures the <see cref=\\\"T:Prism.Regions.IRegionBehaviorFactory\\\"/>. \",\n    \"            This will be the list of default behaviors that will be added to a region. \",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Bootstrapper.CreateShell\\\">\",\n    \"            <summary>\",\n    \"            Creates the shell or main window of the application.\",\n    \"            </summary>\",\n    \"            <returns>The shell of the application.</returns>\",\n    \"            <remarks>\",\n    \"            If the returned instance is a <see cref=\\\"T:System.Windows.DependencyObject\\\"/>, the\",\n    \"            <see cref=\\\"T:Prism.Bootstrapper\\\"/> will attach the default <see cref=\\\"T:Prism.Regions.IRegionManager\\\"/> of\",\n    \"            the application in its <see cref=\\\"F:Prism.Regions.RegionManager.RegionManagerProperty\\\"/> attached property\",\n    \"            in order to be able to add regions by using the <see cref=\\\"F:Prism.Regions.RegionManager.RegionNameProperty\\\"/>\",\n    \"            attached property from XAML.\",\n    \"            </remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Bootstrapper.InitializeShell\\\">\",\n    \"            <summary>\",\n    \"            Initializes the shell.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Bootstrapper.Run(System.Boolean)\\\">\",\n    \"            <summary>\",\n    \"            Run the bootstrapper process.\",\n    \"            </summary>\",\n    \"            <param name=\\\"runWithDefaultConfiguration\\\">If <see langword=\\\"true\\\"/>, registers default \",\n    \"            Prism Library services in the container. This is the default behavior.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Bootstrapper.ConfigureServiceLocator\\\">\",\n    \"            <summary>\",\n    \"            Configures the LocatorProvider for the <see cref=\\\"!:Microsoft.Practices.ServiceLocation.ServiceLocator\\\" />.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Bootstrapper.OnInitialized\\\">\",\n    \"            <summary>\",\n    \"            Contains actions that should occur last.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Common.ObservableObject`1\\\">\",\n    \"            <summary>\",\n    \"            Class that wraps an object, so that other classes can notify for Change events. Typically, this class is set as \",\n    \"            a Dependency Property on DependencyObjects, and allows other classes to observe any changes in the Value. \",\n    \"            </summary>\",\n    \"            <remarks>\",\n    \"            This class is required, because in Silverlight, it's not possible to receive Change notifications for Dependency properties that you do not own. \",\n    \"            </remarks>\",\n    \"            <typeparam name=\\\"T\\\">The type of the property that's wrapped in the Observable object</typeparam>\",\n    \"        </member>\",\n    \"        <member name=\\\"F:Prism.Common.ObservableObject`1.ValueProperty\\\">\",\n    \"            <summary>\",\n    \"            Identifies the Value property of the ObservableObject\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"E:Prism.Common.ObservableObject`1.PropertyChanged\\\">\",\n    \"            <summary>\",\n    \"            Event that gets invoked when the Value property changes. \",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Common.ObservableObject`1.Value\\\">\",\n    \"            <summary>\",\n    \"            The value that's wrapped inside the ObservableObject.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Common.UriParsingHelper\\\">\",\n    \"            <summary>\",\n    \"            Helper class for parsing <see cref=\\\"T:System.Uri\\\"/> instances.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Common.UriParsingHelper.GetQuery(System.Uri)\\\">\",\n    \"            <summary>\",\n    \"            Gets the query part of <paramref name=\\\"uri\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"uri\\\">The Uri.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Common.UriParsingHelper.GetAbsolutePath(System.Uri)\\\">\",\n    \"            <summary>\",\n    \"            Gets the AbsolutePath part of <paramref name=\\\"uri\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"uri\\\">The Uri.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Common.UriParsingHelper.ParseQuery(System.Uri)\\\">\",\n    \"            <summary>\",\n    \"            Parses the query of <paramref name=\\\"uri\\\"/> into a dictionary.\",\n    \"            </summary>\",\n    \"            <param name=\\\"uri\\\">The URI.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Interactivity.CommandBehaviorBase`1\\\">\",\n    \"            <summary>\",\n    \"            Base behavior to handle connecting a <see cref=\\\"T:System.Windows.Controls.Control\\\"/> to a Command.\",\n    \"            </summary>\",\n    \"            <typeparam name=\\\"T\\\">The target object must derive from Control</typeparam>\",\n    \"            <remarks>\",\n    \"            CommandBehaviorBase can be used to provide new behaviors for commands.\",\n    \"            </remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.CommandBehaviorBase`1.#ctor(`0)\\\">\",\n    \"            <summary>\",\n    \"            Constructor specifying the target object.\",\n    \"            </summary>\",\n    \"            <param name=\\\"targetObject\\\">The target object the behavior is attached to.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.CommandBehaviorBase`1.Command\\\">\",\n    \"            <summary>\",\n    \"            Corresponding command to be execute and monitored for <see cref=\\\"E:System.Windows.Input.ICommand.CanExecuteChanged\\\"/>\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.CommandBehaviorBase`1.CommandParameter\\\">\",\n    \"            <summary>\",\n    \"            The parameter to supply the command during execution\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.CommandBehaviorBase`1.TargetObject\\\">\",\n    \"            <summary>\",\n    \"            Object to which this behavior is attached.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.CommandBehaviorBase`1.UpdateEnabledState\\\">\",\n    \"            <summary>\",\n    \"            Updates the target object's IsEnabled property based on the commands ability to execute.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.CommandBehaviorBase`1.ExecuteCommand(System.Object)\\\">\",\n    \"            <summary>\",\n    \"            Executes the command, if it's set, providing the <see cref=\\\"P:Prism.Interactivity.CommandBehaviorBase`1.CommandParameter\\\"/>\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Interactivity.DefaultPopupWindows.DefaultConfirmationWindow\\\">\",\n    \"            <summary>\",\n    \"            Interaction logic for ConfirmationChildWindow.xaml\",\n    \"            </summary>\",\n    \"            <summary>\",\n    \"            DefaultConfirmationWindow\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.DefaultPopupWindows.DefaultConfirmationWindow.#ctor\\\">\",\n    \"            <summary>\",\n    \"            Creates a new instance of ConfirmationChildWindow.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.DefaultPopupWindows.DefaultConfirmationWindow.Confirmation\\\">\",\n    \"            <summary>\",\n    \"            Sets or gets the <see cref=\\\"T:Prism.Interactivity.InteractionRequest.IConfirmation\\\"/> shown by this window./>\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.DefaultPopupWindows.DefaultConfirmationWindow.InitializeComponent\\\">\",\n    \"            <summary>\",\n    \"            InitializeComponent\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Interactivity.DefaultPopupWindows.DefaultNotificationWindow\\\">\",\n    \"            <summary>\",\n    \"            Interaction logic for NotificationChildWindow.xaml\",\n    \"            </summary>\",\n    \"            <summary>\",\n    \"            DefaultNotificationWindow\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.DefaultPopupWindows.DefaultNotificationWindow.#ctor\\\">\",\n    \"            <summary>\",\n    \"            Creates a new instance of <see cref=\\\"T:Prism.Interactivity.DefaultPopupWindows.DefaultNotificationWindow\\\"/>\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.DefaultPopupWindows.DefaultNotificationWindow.Notification\\\">\",\n    \"            <summary>\",\n    \"            Sets or gets the <see cref=\\\"T:Prism.Interactivity.InteractionRequest.INotification\\\"/> shown by this window./>\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.DefaultPopupWindows.DefaultNotificationWindow.InitializeComponent\\\">\",\n    \"            <summary>\",\n    \"            InitializeComponent\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Interactivity.DefaultPopupWindows.DefaultWindow\\\">\",\n    \"            <summary>\",\n    \"            Interaction logic for DefaultWindow.xaml\",\n    \"            </summary>\",\n    \"            <summary>\",\n    \"            DefaultWindow\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.DefaultPopupWindows.DefaultWindow.InitializeComponent\\\">\",\n    \"            <summary>\",\n    \"            InitializeComponent\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Interactivity.InteractionRequest.Confirmation\\\">\",\n    \"            <summary>\",\n    \"            Basic implementation of <see cref=\\\"T:Prism.Interactivity.InteractionRequest.IConfirmation\\\"/>.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.InteractionRequest.Confirmation.Confirmed\\\">\",\n    \"            <summary>\",\n    \"            Gets or sets a value indicating that the confirmation is confirmed.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Interactivity.InteractionRequest.IConfirmation\\\">\",\n    \"            <summary>\",\n    \"            Represents an interaction request used for confirmations.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.InteractionRequest.IConfirmation.Confirmed\\\">\",\n    \"            <summary>\",\n    \"            Gets or sets a value indicating that the confirmation is confirmed.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Interactivity.InteractionRequest.IInteractionRequest\\\">\",\n    \"            <summary>\",\n    \"            Represents a request from user interaction.\",\n    \"            </summary>\",\n    \"            <remarks>\",\n    \"            View models can expose interaction request objects through properties and raise them when user interaction\",\n    \"            is required so views associated with the view models can materialize the user interaction using an appropriate\",\n    \"            mechanism.\",\n    \"            </remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"E:Prism.Interactivity.InteractionRequest.IInteractionRequest.Raised\\\">\",\n    \"            <summary>\",\n    \"            Fired when the interaction is needed.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Interactivity.InteractionRequest.IInteractionRequestAware\\\">\",\n    \"            <summary>\",\n    \"            Interface used by the <see cref=\\\"T:Prism.Interactivity.PopupWindowAction\\\"/>.\",\n    \"            If the DataContext object of a view that is shown with this action implements this interface\",\n    \"            it will be populated with the <see cref=\\\"T:Prism.Interactivity.InteractionRequest.INotification\\\"/> data of the interaction request \",\n    \"            as well as an <see cref=\\\"T:System.Action\\\"/> to finish the request upon invocation.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.InteractionRequest.IInteractionRequestAware.Notification\\\">\",\n    \"            <summary>\",\n    \"            The <see cref=\\\"T:Prism.Interactivity.InteractionRequest.INotification\\\"/> passed when the interaction request was raised.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.InteractionRequest.IInteractionRequestAware.FinishInteraction\\\">\",\n    \"            <summary>\",\n    \"            An <see cref=\\\"T:System.Action\\\"/> that can be invoked to finish the interaction.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Interactivity.InteractionRequest.INotification\\\">\",\n    \"            <summary>\",\n    \"            Represents an interaction request used for notifications.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.InteractionRequest.INotification.Title\\\">\",\n    \"            <summary>\",\n    \"            Gets or sets the title to use for the notification.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.InteractionRequest.INotification.Content\\\">\",\n    \"            <summary>\",\n    \"            Gets or sets the content of the notification.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Interactivity.InteractionRequest.InteractionRequest`1\\\">\",\n    \"            <summary>\",\n    \"            Implementation of the <see cref=\\\"T:Prism.Interactivity.InteractionRequest.IInteractionRequest\\\"/> interface.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"E:Prism.Interactivity.InteractionRequest.InteractionRequest`1.Raised\\\">\",\n    \"            <summary>\",\n    \"            Fired when interaction is needed.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.InteractionRequest.InteractionRequest`1.Raise(`0)\\\">\",\n    \"            <summary>\",\n    \"            Fires the Raised event.\",\n    \"            </summary>\",\n    \"            <param name=\\\"context\\\">The context for the interaction request.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.InteractionRequest.InteractionRequest`1.Raise(`0,System.Action{`0})\\\">\",\n    \"            <summary>\",\n    \"            Fires the Raised event.\",\n    \"            </summary>\",\n    \"            <param name=\\\"context\\\">The context for the interaction request.</param>\",\n    \"            <param name=\\\"callback\\\">The callback to execute when the interaction is completed.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Interactivity.InteractionRequest.InteractionRequestedEventArgs\\\">\",\n    \"            <summary>\",\n    \"            Event args for the <see cref=\\\"E:Prism.Interactivity.InteractionRequest.IInteractionRequest.Raised\\\"/> event.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.InteractionRequest.InteractionRequestedEventArgs.#ctor(Prism.Interactivity.InteractionRequest.INotification,System.Action)\\\">\",\n    \"            <summary>\",\n    \"            Constructs a new instance of <see cref=\\\"T:Prism.Interactivity.InteractionRequest.InteractionRequestedEventArgs\\\"/>\",\n    \"            </summary>\",\n    \"            <param name=\\\"context\\\"></param>\",\n    \"            <param name=\\\"callback\\\"></param>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.InteractionRequest.InteractionRequestedEventArgs.Context\\\">\",\n    \"            <summary>\",\n    \"            Gets the context for a requested interaction.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.InteractionRequest.InteractionRequestedEventArgs.Callback\\\">\",\n    \"            <summary>\",\n    \"            Gets the callback to execute when an interaction is completed.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Interactivity.InteractionRequest.InteractionRequestTrigger\\\">\",\n    \"            <summary>\",\n    \"            Custom event trigger for using with <see cref=\\\"T:Prism.Interactivity.InteractionRequest.IInteractionRequest\\\"/> objects.\",\n    \"            </summary>\",\n    \"            <remarks>\",\n    \"            The standard <see cref=\\\"T:System.Windows.Interactivity.EventTrigger\\\"/> class can be used instead, as long as the 'Raised' event \",\n    \"            name is specified.\",\n    \"            </remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.InteractionRequest.InteractionRequestTrigger.GetEventName\\\">\",\n    \"            <summary>\",\n    \"            Specifies the name of the Event this EventTriggerBase is listening for.\",\n    \"            </summary>\",\n    \"            <returns>This implementation always returns the Raised event name for ease of connection with <see cref=\\\"T:Prism.Interactivity.InteractionRequest.IInteractionRequest\\\"/>.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Interactivity.InteractionRequest.Notification\\\">\",\n    \"            <summary>\",\n    \"            Basic implementation of <see cref=\\\"T:Prism.Interactivity.InteractionRequest.INotification\\\"/>.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.InteractionRequest.Notification.Title\\\">\",\n    \"            <summary>\",\n    \"            Gets or sets the title to use for the notification.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.InteractionRequest.Notification.Content\\\">\",\n    \"            <summary>\",\n    \"            Gets or sets the content of the notification.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Interactivity.InvokeCommandAction\\\">\",\n    \"            <summary>\",\n    \"            Trigger action that executes a command when invoked. \",\n    \"            It also maintains the Enabled state of the target control based on the CanExecute method of the command.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"F:Prism.Interactivity.InvokeCommandAction.AutoEnableProperty\\\">\",\n    \"            <summary>\",\n    \"            Dependency property identifying if the associated element should automaticlaly be enabled or disabled based on the result of the Command's CanExecute\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.InvokeCommandAction.AutoEnable\\\">\",\n    \"            <summary>\",\n    \"            Gets or sets whther or not the associated element will automatically be enabled or disabled based on the result of the commands CanExecute\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"F:Prism.Interactivity.InvokeCommandAction.CommandProperty\\\">\",\n    \"            <summary>\",\n    \"            Dependency property identifying the command to execute when invoked.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.InvokeCommandAction.Command\\\">\",\n    \"            <summary>\",\n    \"            Gets or sets the command to execute when invoked.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"F:Prism.Interactivity.InvokeCommandAction.CommandParameterProperty\\\">\",\n    \"            <summary>\",\n    \"            Dependency property identifying the command parameter to supply on command execution.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.InvokeCommandAction.CommandParameter\\\">\",\n    \"            <summary>\",\n    \"            Gets or sets the command parameter to supply on command execution.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"F:Prism.Interactivity.InvokeCommandAction.TriggerParameterPathProperty\\\">\",\n    \"            <summary>\",\n    \"            Dependency property identifying the TriggerParameterPath to be parsed to identify the child property of the trigger parameter to be used as the command parameter.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.InvokeCommandAction.TriggerParameterPath\\\">\",\n    \"            <summary>\",\n    \"            Gets or sets the TriggerParameterPath value.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.InvokeCommandAction.InvokeAction(System.Object)\\\">\",\n    \"            <summary>\",\n    \"            Public wrapper of the Invoke method.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.InvokeCommandAction.Invoke(System.Object)\\\">\",\n    \"            <summary>\",\n    \"            Executes the command\",\n    \"            </summary>\",\n    \"            <param name=\\\"parameter\\\">This parameter is passed to the command; the CommandParameter specified in the CommandParameterProperty is used for command invocation if not null.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.InvokeCommandAction.OnDetaching\\\">\",\n    \"            <summary>\",\n    \"            Sets the Command and CommandParameter properties to null.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.InvokeCommandAction.OnAttached\\\">\",\n    \"            <summary>\",\n    \"            This method is called after the behavior is attached.\",\n    \"            It updates the command behavior's Command and CommandParameter properties if necessary.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Interactivity.InvokeCommandAction.ExecutableCommandBehavior\\\">\",\n    \"            <summary>\",\n    \"            A CommandBehavior that exposes a public ExecuteCommand method. It provides the functionality to invoke commands and update Enabled state of the target control.\",\n    \"            It is not possible to make the <see cref=\\\"T:Prism.Interactivity.InvokeCommandAction\\\"/> inherit from <see cref=\\\"T:Prism.Interactivity.CommandBehaviorBase`1\\\"/>, since the <see cref=\\\"T:Prism.Interactivity.InvokeCommandAction\\\"/>\",\n    \"            must already inherit from <see cref=\\\"T:System.Windows.Interactivity.TriggerAction`1\\\"/>, so we chose to follow the aggregation approach.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.InvokeCommandAction.ExecutableCommandBehavior.#ctor(System.Windows.UIElement)\\\">\",\n    \"            <summary>\",\n    \"            Constructor specifying the target object.\",\n    \"            </summary>\",\n    \"            <param name=\\\"target\\\">The target object the behavior is attached to.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.InvokeCommandAction.ExecutableCommandBehavior.ExecuteCommand(System.Object)\\\">\",\n    \"            <summary>\",\n    \"            Executes the command, if it's set.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Interactivity.PopupWindowAction\\\">\",\n    \"            <summary>\",\n    \"            Shows a popup window in response to an <see cref=\\\"N:Prism.Interactivity.InteractionRequest\\\"/> being raised.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"F:Prism.Interactivity.PopupWindowAction.WindowContentProperty\\\">\",\n    \"            <summary>\",\n    \"            The content of the child window to display as part of the popup.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"F:Prism.Interactivity.PopupWindowAction.WindowContentTypeProperty\\\">\",\n    \"            <summary>\",\n    \"            The type of content of the child window to display as part of the popup.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"F:Prism.Interactivity.PopupWindowAction.IsModalProperty\\\">\",\n    \"            <summary>\",\n    \"            Determines if the content should be shown in a modal window or not.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"F:Prism.Interactivity.PopupWindowAction.CenterOverAssociatedObjectProperty\\\">\",\n    \"            <summary>\",\n    \"            Determines if the content should be initially shown centered over the view that raised the interaction request or not.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"F:Prism.Interactivity.PopupWindowAction.WindowStartupLocationProperty\\\">\",\n    \"            <summary>\",\n    \"            If set, applies this WindowStartupLocation to the child window.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"F:Prism.Interactivity.PopupWindowAction.WindowStyleProperty\\\">\",\n    \"            <summary>\",\n    \"            If set, applies this Style to the child window.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.PopupWindowAction.WindowContent\\\">\",\n    \"            <summary>\",\n    \"            Gets or sets the content of the window.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.PopupWindowAction.WindowContentType\\\">\",\n    \"            <summary>\",\n    \"            Gets or sets the type of content of the window.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.PopupWindowAction.IsModal\\\">\",\n    \"            <summary>\",\n    \"            Gets or sets if the window will be modal or not.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.PopupWindowAction.CenterOverAssociatedObject\\\">\",\n    \"            <summary>\",\n    \"            Gets or sets if the window will be initially shown centered over the view that raised the interaction request or not.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.PopupWindowAction.WindowStartupLocation\\\">\",\n    \"            <summary>\",\n    \"            Gets or sets the startup location of the Window.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Interactivity.PopupWindowAction.WindowStyle\\\">\",\n    \"            <summary>\",\n    \"            Gets or sets the Style of the Window.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.PopupWindowAction.Invoke(System.Object)\\\">\",\n    \"            <summary>\",\n    \"            Displays the child window and collects results for <see cref=\\\"T:Prism.Interactivity.InteractionRequest.IInteractionRequest\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"parameter\\\">The parameter to the action. If the action does not require a parameter, the parameter may be set to a null reference.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.PopupWindowAction.GetWindow(Prism.Interactivity.InteractionRequest.INotification)\\\">\",\n    \"            <summary>\",\n    \"            Returns the window to display as part of the trigger action.\",\n    \"            </summary>\",\n    \"            <param name=\\\"notification\\\">The notification to be set as a DataContext in the window.</param>\",\n    \"            <returns></returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.PopupWindowAction.PrepareContentForWindow(Prism.Interactivity.InteractionRequest.INotification,System.Windows.Window)\\\">\",\n    \"            <summary>\",\n    \"            Checks if the WindowContent or its DataContext implements <see cref=\\\"T:Prism.Interactivity.InteractionRequest.IInteractionRequestAware\\\"/>.\",\n    \"            If so, it sets the corresponding values.\",\n    \"            </summary>\",\n    \"            <param name=\\\"notification\\\">The notification to be set as a DataContext in the HostWindow.</param>\",\n    \"            <param name=\\\"wrapperWindow\\\">The HostWindow</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.PopupWindowAction.CreateWindow\\\">\",\n    \"            <summary>\",\n    \"            Creates a Window that is used when providing custom Window Content\",\n    \"            </summary>\",\n    \"            <returns>The Window</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Interactivity.PopupWindowAction.CreateDefaultWindow(Prism.Interactivity.InteractionRequest.INotification)\\\">\",\n    \"            <summary>\",\n    \"            When no WindowContent is sent this method is used to create a default basic window to show\",\n    \"            the corresponding <see cref=\\\"T:Prism.Interactivity.InteractionRequest.INotification\\\"/> or <see cref=\\\"T:Prism.Interactivity.InteractionRequest.IConfirmation\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"notification\\\">The INotification or IConfirmation parameter to show.</param>\",\n    \"            <returns></returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Ioc.IContainerRegistryExtensions.RegisterDialog``1(Prism.Ioc.IContainerRegistry,System.String)\\\">\",\n    \"            <summary>\",\n    \"            Registers an object to be used as a dialog in the IDialogService.\",\n    \"            </summary>\",\n    \"            <typeparam name=\\\"TView\\\">The Type of object to register as the dialog</typeparam>\",\n    \"            <param name=\\\"containerRegistry\\\"></param>\",\n    \"            <param name=\\\"name\\\">The unique name to register with the dialog.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Ioc.IContainerRegistryExtensions.RegisterDialog``2(Prism.Ioc.IContainerRegistry,System.String)\\\">\",\n    \"            <summary>\",\n    \"            Registers an object to be used as a dialog in the IDialogService.\",\n    \"            </summary>\",\n    \"            <typeparam name=\\\"TView\\\">The Type of object to register as the dialog</typeparam>\",\n    \"            <typeparam name=\\\"TViewModel\\\">The ViewModel to use as the DataContext for the dialog</typeparam>\",\n    \"            <param name=\\\"containerRegistry\\\"></param>\",\n    \"            <param name=\\\"name\\\">The unique name to register with the dialog.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Ioc.IContainerRegistryExtensions.RegisterDialogWindow``1(Prism.Ioc.IContainerRegistry)\\\">\",\n    \"            <summary>\",\n    \"            Registers an object that implements IDialogWindow to be used to host all dialogs in the IDialogService.\",\n    \"            </summary>\",\n    \"            <typeparam name=\\\"TWindow\\\">The Type of the Window class that will be used to host dialogs in the IDialogService</typeparam>\",\n    \"            <param name=\\\"containerRegistry\\\"></param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Ioc.IContainerRegistryExtensions.RegisterForNavigation(Prism.Ioc.IContainerRegistry,System.Type,System.String)\\\">\",\n    \"            <summary>\",\n    \"            Registers an object for navigation\",\n    \"            </summary>\",\n    \"            <param name=\\\"containerRegistry\\\"></param>\",\n    \"            <param name=\\\"type\\\">The type of object to register</param>\",\n    \"            <param name=\\\"name\\\">The unique name to register with the obect.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Ioc.IContainerRegistryExtensions.RegisterForNavigation``1(Prism.Ioc.IContainerRegistry,System.String)\\\">\",\n    \"            <summary>\",\n    \"            Registers an object for navigation.\",\n    \"            </summary>\",\n    \"            <typeparam name=\\\"T\\\">The Type of the object to register as the view</typeparam>\",\n    \"            <param name=\\\"containerRegistry\\\"></param>\",\n    \"            <param name=\\\"name\\\">The unique name to register with the object.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Ioc.IContainerRegistryExtensions.RegisterForNavigation``2(Prism.Ioc.IContainerRegistry,System.String)\\\">\",\n    \"            <summary>\",\n    \"            Registers an object for navigation with the ViewModel type to be used as the DataContext.\",\n    \"            </summary>\",\n    \"            <typeparam name=\\\"TView\\\">The Type of object to register as the view</typeparam>\",\n    \"            <typeparam name=\\\"TViewModel\\\">The ViewModel to use as the DataContext for the view</typeparam>\",\n    \"            <param name=\\\"containerRegistry\\\"></param>\",\n    \"            <param name=\\\"name\\\">The unique name to register with the view</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Logging.TextLogger\\\">\",\n    \"            <summary>\",\n    \"            Implementation of <see cref=\\\"T:Prism.Logging.ILoggerFacade\\\"/> that logs into a <see cref=\\\"T:System.IO.TextWriter\\\"/>.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Logging.TextLogger.#ctor\\\">\",\n    \"            <summary>\",\n    \"            Initializes a new instance of <see cref=\\\"T:Prism.Logging.TextLogger\\\"/> that writes to\",\n    \"            the console output.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Logging.TextLogger.Log(System.String,Prism.Logging.Category,Prism.Logging.Priority)\\\">\",\n    \"            <summary>\",\n    \"            Write a new log entry with the specified category and priority.\",\n    \"            </summary>\",\n    \"            <param name=\\\"message\\\">Message body to log.</param>\",\n    \"            <param name=\\\"category\\\">Category of the entry.</param>\",\n    \"            <param name=\\\"priority\\\">The priority of the entry.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Logging.TextLogger.Dispose(System.Boolean)\\\">\",\n    \"            <summary>\",\n    \"            Disposes the associated <see cref=\\\"T:System.IO.TextWriter\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"disposing\\\">When <see langword=\\\"true\\\"/>, disposes the associated <see cref=\\\"T:System.IO.TextWriter\\\"/>.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Logging.TextLogger.Dispose\\\">\",\n    \"            <summary>\",\n    \"            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\",\n    \"            </summary>\",\n    \"             <remarks>Calls <see cref=\\\"M:Prism.Logging.TextLogger.Dispose(System.Boolean)\\\"/></remarks>.\",\n    \"            <filterpriority>2</filterpriority>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Logging.TraceLogger\\\">\",\n    \"            <summary>\",\n    \"            Implementation of <see cref=\\\"T:Prism.Logging.ILoggerFacade\\\"/> that logs to .NET <see cref=\\\"T:System.Diagnostics.Trace\\\"/> class.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Logging.TraceLogger.Log(System.String,Prism.Logging.Category,Prism.Logging.Priority)\\\">\",\n    \"            <summary>\",\n    \"            Write a new log entry with the specified category and priority.\",\n    \"            </summary>\",\n    \"            <param name=\\\"message\\\">Message body to log.</param>\",\n    \"            <param name=\\\"category\\\">Category of the entry.</param>\",\n    \"            <param name=\\\"priority\\\">The priority of the entry.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Modularity.AssemblyResolver\\\">\",\n    \"            <summary>\",\n    \"            Handles AppDomain's AssemblyResolve event to be able to load assemblies dynamically in \",\n    \"            the LoadFrom context, but be able to reference the type from assemblies loaded in the Load context.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.AssemblyResolver.LoadAssemblyFrom(System.String)\\\">\",\n    \"            <summary>\",\n    \"            Registers the specified assembly and resolves the types in it when the AppDomain requests for it.\",\n    \"            </summary>\",\n    \"            <param name=\\\"assemblyFilePath\\\">The path to the assemly to load in the LoadFrom context.</param>\",\n    \"            <remarks>This method does not load the assembly immediately, but lazily until someone requests a <see cref=\\\"T:System.Type\\\"/>\",\n    \"            declared in the assembly.</remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.AssemblyResolver.Dispose\\\">\",\n    \"            <summary>\",\n    \"            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\",\n    \"            </summary>\",\n    \"            <remarks>Calls <see cref=\\\"M:Prism.Modularity.AssemblyResolver.Dispose(System.Boolean)\\\"/></remarks>.\",\n    \"            <filterpriority>2</filterpriority>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.AssemblyResolver.Dispose(System.Boolean)\\\">\",\n    \"            <summary>\",\n    \"            Disposes the associated <see cref=\\\"T:Prism.Modularity.AssemblyResolver\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"disposing\\\">When <see langword=\\\"true\\\"/>, it is being called from the Dispose method.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Modularity.ConfigurationModuleCatalog\\\">\",\n    \"            <summary>\",\n    \"            A catalog built from a configuration file.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.ConfigurationModuleCatalog.#ctor\\\">\",\n    \"            <summary>\",\n    \"            Builds an instance of ConfigurationModuleCatalog with a <see cref=\\\"T:Prism.Modularity.ConfigurationStore\\\"/> as the default store.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Modularity.ConfigurationModuleCatalog.Store\\\">\",\n    \"            <summary>\",\n    \"            Gets or sets the store where the configuration is kept.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.ConfigurationModuleCatalog.InnerLoad\\\">\",\n    \"            <summary>\",\n    \"            Loads the catalog from the configuration.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Modularity.ConfigurationStore\\\">\",\n    \"            <summary>\",\n    \"            Defines a store for the module metadata.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.ConfigurationStore.RetrieveModuleConfigurationSection\\\">\",\n    \"            <summary>\",\n    \"            Gets the module configuration data.\",\n    \"            </summary>\",\n    \"            <returns>A <see cref=\\\"T:Prism.Modularity.ModulesConfigurationSection\\\"/> instance.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Modularity.DirectoryModuleCatalog\\\">\",\n    \"             <summary>\",\n    \"             Represets a catalog created from a directory on disk.\",\n    \"             </summary>\",\n    \"             <remarks>\",\n    \"             The directory catalog will scan the contents of a directory, locating classes that implement\",\n    \"             <see cref=\\\"T:Prism.Modularity.IModule\\\"/> and add them to the catalog based on contents in their associated <see cref=\\\"T:Prism.Modularity.ModuleAttribute\\\"/>.\",\n    \"             Assemblies are loaded into a new application domain with ReflectionOnlyLoad.  The application domain is destroyed\",\n    \"             once the assemblies have been discovered.\",\n    \"            \",\n    \"             The diretory catalog does not continue to monitor the directory after it has created the initialze catalog.\",\n    \"             </remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Modularity.DirectoryModuleCatalog.ModulePath\\\">\",\n    \"            <summary>\",\n    \"            Directory containing modules to search for.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.DirectoryModuleCatalog.InnerLoad\\\">\",\n    \"            <summary>\",\n    \"            Drives the main logic of building the child domain and searching for the assemblies.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.DirectoryModuleCatalog.BuildChildDomain(System.AppDomain)\\\">\",\n    \"            <summary>\",\n    \"            Creates a new child domain and copies the evidence from a parent domain.\",\n    \"            </summary>\",\n    \"            <param name=\\\"parentDomain\\\">The parent domain.</param>\",\n    \"            <returns>The new child domain.</returns>\",\n    \"            <remarks>\",\n    \"            Grabs the <paramref name=\\\"parentDomain\\\"/> evidence and uses it to construct the new\",\n    \"            <see cref=\\\"T:System.AppDomain\\\"/> because in a ClickOnce execution environment, creating an\",\n    \"            <see cref=\\\"T:System.AppDomain\\\"/> will by default pick up the partial trust environment of\",\n    \"            the AppLaunch.exe, which was the root executable. The AppLaunch.exe does a\",\n    \"            create domain and applies the evidence from the ClickOnce manifests to\",\n    \"            create the domain that the application is actually executing in. This will\",\n    \"            need to be Full Trust for Prism applications.\",\n    \"            </remarks>\",\n    \"            <exception cref=\\\"T:System.ArgumentNullException\\\">An <see cref=\\\"T:System.ArgumentNullException\\\"/> is thrown if <paramref name=\\\"parentDomain\\\"/> is null.</exception>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Modularity.FileModuleTypeLoader\\\">\",\n    \"            <summary>\",\n    \"            Loads modules from an arbitrary location on the filesystem. This typeloader is only called if\",\n    \"            <see cref=\\\"T:Prism.Modularity.ModuleInfo\\\"/> classes have a Ref parameter that starts with \\\"file://\\\".\",\n    \"            This class is only used on the Desktop version of the Prism Library.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.FileModuleTypeLoader.#ctor\\\">\",\n    \"            <summary>\",\n    \"            Initializes a new instance of the <see cref=\\\"T:Prism.Modularity.FileModuleTypeLoader\\\"/> class.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.FileModuleTypeLoader.#ctor(Prism.Modularity.IAssemblyResolver)\\\">\",\n    \"            <summary>\",\n    \"            Initializes a new instance of the <see cref=\\\"T:Prism.Modularity.FileModuleTypeLoader\\\"/> class.\",\n    \"            </summary>\",\n    \"            <param name=\\\"assemblyResolver\\\">The assembly resolver.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"E:Prism.Modularity.FileModuleTypeLoader.ModuleDownloadProgressChanged\\\">\",\n    \"            <summary>\",\n    \"            Raised repeatedly to provide progress as modules are loaded in the background.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"E:Prism.Modularity.FileModuleTypeLoader.LoadModuleCompleted\\\">\",\n    \"            <summary>\",\n    \"            Raised when a module is loaded or fails to load.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.FileModuleTypeLoader.CanLoadModuleType(Prism.Modularity.IModuleInfo)\\\">\",\n    \"            <summary>\",\n    \"            Evaluates the <see cref=\\\"P:Prism.Modularity.IModuleInfo.Ref\\\"/> property to see if the current typeloader will be able to retrieve the <paramref name=\\\"moduleInfo\\\"/>.\",\n    \"            Returns true if the <see cref=\\\"P:Prism.Modularity.IModuleInfo.Ref\\\"/> property starts with \\\"file://\\\", because this indicates that the file\",\n    \"            is a local file.\",\n    \"            </summary>\",\n    \"            <param name=\\\"moduleInfo\\\">Module that should have it's type loaded.</param>\",\n    \"            <returns>\",\n    \"            \",\n    \"<see langword=\\\"true\\\"/> if the current typeloader is able to retrieve the module, otherwise <see langword=\\\"false\\\"/>.\",\n    \"            </returns>\",\n    \"            <exception cref=\\\"T:System.ArgumentNullException\\\">An <see cref=\\\"T:System.ArgumentNullException\\\"/> is thrown if <paramref name=\\\"moduleInfo\\\"/> is null.</exception>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.FileModuleTypeLoader.LoadModuleType(Prism.Modularity.IModuleInfo)\\\">\",\n    \"            <summary>\",\n    \"            Retrieves the <paramref name=\\\"moduleInfo\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"moduleInfo\\\">Module that should have it's type loaded.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.FileModuleTypeLoader.Dispose\\\">\",\n    \"            <summary>\",\n    \"            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\",\n    \"            </summary>\",\n    \"            <remarks>Calls <see cref=\\\"M:Prism.Modularity.FileModuleTypeLoader.Dispose(System.Boolean)\\\"/></remarks>.\",\n    \"            <filterpriority>2</filterpriority>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.FileModuleTypeLoader.Dispose(System.Boolean)\\\">\",\n    \"            <summary>\",\n    \"            Disposes the associated <see cref=\\\"T:Prism.Modularity.AssemblyResolver\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"disposing\\\">When <see langword=\\\"true\\\"/>, it is being called from the Dispose method.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Modularity.IAssemblyResolver\\\">\",\n    \"            <summary>\",\n    \"            Interface for classes that are responsible for resolving and loading assembly files. \",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.IAssemblyResolver.LoadAssemblyFrom(System.String)\\\">\",\n    \"            <summary>\",\n    \"            Load an assembly when it's required by the application. \",\n    \"            </summary>\",\n    \"            <param name=\\\"assemblyFilePath\\\"></param>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Modularity.IConfigurationStore\\\">\",\n    \"            <summary>\",\n    \"            Defines a store for the module metadata.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.IConfigurationStore.RetrieveModuleConfigurationSection\\\">\",\n    \"            <summary>\",\n    \"            Gets the module configuration data.\",\n    \"            </summary>\",\n    \"            <returns>A <see cref=\\\"T:Prism.Modularity.ModulesConfigurationSection\\\"/> instance.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.IModuleCatalogExtensions.AddModule``1(Prism.Modularity.IModuleCatalog,Prism.Modularity.InitializationMode,System.String[])\\\">\",\n    \"            <summary>\",\n    \"            Adds the module.\",\n    \"            </summary>\",\n    \"            <returns>The module.</returns>\",\n    \"            <param name=\\\"catalog\\\">Catalog</param>\",\n    \"            <param name=\\\"mode\\\"><see cref=\\\"T:Prism.Modularity.InitializationMode\\\"/></param>\",\n    \"            <typeparam name=\\\"T\\\">The <see cref=\\\"T:Prism.Modularity.IModule\\\"/> type parameter.</typeparam>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.IModuleCatalogExtensions.AddModule``1(Prism.Modularity.IModuleCatalog,System.String,Prism.Modularity.InitializationMode,System.String[])\\\">\",\n    \"            <summary>\",\n    \"            Adds the module.\",\n    \"            </summary>\",\n    \"            <returns>The module.</returns>\",\n    \"            <param name=\\\"catalog\\\">Catalog.</param>\",\n    \"            <param name=\\\"name\\\">Name.</param>\",\n    \"            <param name=\\\"mode\\\"><see cref=\\\"T:Prism.Modularity.IModule\\\"/>.</param>\",\n    \"            <typeparam name=\\\"T\\\">The <see cref=\\\"T:Prism.Modularity.IModule\\\"/> type parameter.</typeparam>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.IModuleCatalogExtensions.AddModule(Prism.Modularity.IModuleCatalog,System.Type,System.String[])\\\">\",\n    \"            <summary>\",\n    \"            Adds a groupless <see cref=\\\"T:Prism.Modularity.IModuleInfo\\\"/> to the catalog.\",\n    \"            </summary>\",\n    \"            <param name=\\\"moduleType\\\"><see cref=\\\"T:System.Type\\\"/> of the module to be added.</param>\",\n    \"            <param name=\\\"dependsOn\\\">Collection of module names (<see cref=\\\"P:Prism.Modularity.IModuleInfo.ModuleName\\\"/>) of the modules on which the module to be added logically depends on.</param>\",\n    \"            <returns>The same <see cref=\\\"T:Prism.Modularity.IModuleCatalog\\\"/> instance with the added module.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.IModuleCatalogExtensions.AddModule(Prism.Modularity.IModuleCatalog,System.Type,Prism.Modularity.InitializationMode,System.String[])\\\">\",\n    \"            <summary>\",\n    \"            Adds a groupless <see cref=\\\"T:Prism.Modularity.IModuleInfo\\\"/> to the catalog.\",\n    \"            </summary>\",\n    \"            <param name=\\\"moduleType\\\"><see cref=\\\"T:System.Type\\\"/> of the module to be added.</param>\",\n    \"            <param name=\\\"initializationMode\\\">Stage on which the module to be added will be initialized.</param>\",\n    \"            <param name=\\\"dependsOn\\\">Collection of module names (<see cref=\\\"P:Prism.Modularity.IModuleInfo.ModuleName\\\"/>) of the modules on which the module to be added logically depends on.</param>\",\n    \"            <returns>The same <see cref=\\\"T:Prism.Modularity.IModuleCatalog\\\"/> instance with the added module.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.IModuleCatalogExtensions.AddModule(Prism.Modularity.IModuleCatalog,System.String,System.String,System.String[])\\\">\",\n    \"            <summary>\",\n    \"            Adds a groupless <see cref=\\\"T:Prism.Modularity.ModuleInfo\\\"/> to the catalog.\",\n    \"            </summary>\",\n    \"            <param name=\\\"moduleName\\\">Name of the module to be added.</param>\",\n    \"            <param name=\\\"moduleType\\\"><see cref=\\\"T:System.Type\\\"/> of the module to be added.</param>\",\n    \"            <param name=\\\"dependsOn\\\">Collection of module names (<see cref=\\\"P:Prism.Modularity.ModuleInfo.ModuleName\\\"/>) of the modules on which the module to be added logically depends on.</param>\",\n    \"            <returns>The same <see cref=\\\"T:Prism.Modularity.ModuleCatalog\\\"/> instance with the added module.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.IModuleCatalogExtensions.AddModule(Prism.Modularity.IModuleCatalog,System.String,System.String,Prism.Modularity.InitializationMode,System.String[])\\\">\",\n    \"            <summary>\",\n    \"            Adds a groupless <see cref=\\\"T:Prism.Modularity.ModuleInfo\\\"/> to the catalog.\",\n    \"            </summary>\",\n    \"            <param name=\\\"moduleName\\\">Name of the module to be added.</param>\",\n    \"            <param name=\\\"moduleType\\\"><see cref=\\\"T:System.Type\\\"/> of the module to be added.</param>\",\n    \"            <param name=\\\"initializationMode\\\">Stage on which the module to be added will be initialized.</param>\",\n    \"            <param name=\\\"dependsOn\\\">Collection of module names (<see cref=\\\"P:Prism.Modularity.ModuleInfo.ModuleName\\\"/>) of the modules on which the module to be added logically depends on.</param>\",\n    \"            <returns>The same <see cref=\\\"T:Prism.Modularity.ModuleCatalog\\\"/> instance with the added module.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.IModuleCatalogExtensions.AddModule(Prism.Modularity.IModuleCatalog,System.String,System.String,System.String,Prism.Modularity.InitializationMode,System.String[])\\\">\",\n    \"            <summary>\",\n    \"            Adds a groupless <see cref=\\\"T:Prism.Modularity.ModuleInfo\\\"/> to the catalog.\",\n    \"            </summary>\",\n    \"            <param name=\\\"moduleName\\\">Name of the module to be added.</param>\",\n    \"            <param name=\\\"moduleType\\\"><see cref=\\\"T:System.Type\\\"/> of the module to be added.</param>\",\n    \"            <param name=\\\"refValue\\\">Reference to the location of the module to be added assembly.</param>\",\n    \"            <param name=\\\"initializationMode\\\">Stage on which the module to be added will be initialized.</param>\",\n    \"            <param name=\\\"dependsOn\\\">Collection of module names (<see cref=\\\"P:Prism.Modularity.ModuleInfo.ModuleName\\\"/>) of the modules on which the module to be added logically depends on.</param>\",\n    \"            <returns>The same <see cref=\\\"T:Prism.Modularity.ModuleCatalog\\\"/> instance with the added module.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.IModuleCatalogExtensions.AddModule``1(Prism.Modularity.IModuleCatalog,Prism.Modularity.InitializationMode)\\\">\",\n    \"            <summary>\",\n    \"            Adds the module.\",\n    \"            </summary>\",\n    \"            <returns>The module.</returns>\",\n    \"            <param name=\\\"catalog\\\">Catalog</param>\",\n    \"            <param name=\\\"mode\\\"><see cref=\\\"T:Prism.Modularity.InitializationMode\\\"/></param>\",\n    \"            <typeparam name=\\\"T\\\">The <see cref=\\\"T:Prism.Modularity.IModule\\\"/> type parameter.</typeparam>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.IModuleCatalogExtensions.AddModule``1(Prism.Modularity.IModuleCatalog,System.String,Prism.Modularity.InitializationMode)\\\">\",\n    \"            <summary>\",\n    \"            Adds the module.\",\n    \"            </summary>\",\n    \"            <returns>The module.</returns>\",\n    \"            <param name=\\\"catalog\\\">Catalog.</param>\",\n    \"            <param name=\\\"name\\\">Name.</param>\",\n    \"            <param name=\\\"mode\\\"><see cref=\\\"T:Prism.Modularity.IModule\\\"/>.</param>\",\n    \"            <typeparam name=\\\"T\\\">The <see cref=\\\"T:Prism.Modularity.IModule\\\"/> type parameter.</typeparam>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.IModuleCatalogExtensions.AddGroup(Prism.Modularity.IModuleCatalog,Prism.Modularity.InitializationMode,System.String,Prism.Modularity.ModuleInfo[])\\\">\",\n    \"            <summary>\",\n    \"            Creates and adds a <see cref=\\\"T:Prism.Modularity.ModuleInfoGroup\\\"/> to the catalog.\",\n    \"            </summary>\",\n    \"            <param name=\\\"initializationMode\\\">Stage on which the module group to be added will be initialized.</param>\",\n    \"            <param name=\\\"refValue\\\">Reference to the location of the module group to be added.</param>\",\n    \"            <param name=\\\"moduleInfos\\\">Collection of <see cref=\\\"T:Prism.Modularity.ModuleInfo\\\"/> included in the group.</param>\",\n    \"            <returns><see cref=\\\"T:Prism.Modularity.ModuleCatalog\\\"/> with the added module group.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Modularity.IModuleTypeLoader\\\">\",\n    \"            <summary>\",\n    \"            Defines the interface for moduleTypeLoaders\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.IModuleTypeLoader.CanLoadModuleType(Prism.Modularity.IModuleInfo)\\\">\",\n    \"            <summary>\",\n    \"            Evaluates the <see cref=\\\"P:Prism.Modularity.IModuleInfo.Ref\\\"/> property to see if the current typeloader will be able to retrieve the <paramref name=\\\"moduleInfo\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"moduleInfo\\\">Module that should have it's type loaded.</param>\",\n    \"            <returns><see langword=\\\"true\\\"/> if the current typeloader is able to retrieve the module, otherwise <see langword=\\\"false\\\"/>.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Modularity.IModuleTypeLoader.LoadModuleType(Prism.Modularity.IModuleInfo)\\\">\",\n    \"            <summary>\",\n    \"            Retrieves the <paramref name=\\\"moduleInfo\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"moduleInfo\\\">Module that should have it's type loaded.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"E:Prism.Modularity.IModuleTypeLoader.ModuleDownloadProgressChanged\\\">\",\n    \"            <summary>\",\n    \"            Raised repeatedly to provide progress as modules are downloaded in the background.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"E:Prism.Modularity.IModuleTypeLoader.LoadModuleCompleted\\\">\",\n    \"            <summary>\",\n    \"            Raised when a module is loaded or fails to load.\"\n  ],\n  \"hex_dump\": null,\n  \"binary_info\": null,\n  \"signatures\": null,\n  \"symbols\": null,\n  \"control_flow\": null,\n  \"vulnerabilities\": null,\n  \"code_quality\": null,\n  \"dependencies\": null,\n  \"entropy\": null,\n  \"disassembly\": null,\n  \"threats\": null,\n  \"behavioral\": null,\n  \"yara_indicators\": null\n}"}]}}

{"jsonrpc":"2.0","id":1,"result":{"content":[{"type":"text","text":"{\n  \"file_path\": \"/windows/Program Files (x86)/Steam/steamapps/common/EVGA PrecisionX/Library/Prism.xml\",\n  \"metadata\": {\n    \"file_path\": \"/windows/Program Files (x86)/Steam/steamapps/common/EVGA PrecisionX/Library/Prism.xml\",\n    \"file_name\": \"Prism.xml\",\n    \"file_size\": 150991,\n    \"created\": \"2023-03-21T18:54:15.691315400Z\",\n    \"modified\": \"2023-03-21T18:54:15.691315400Z\",\n    \"accessed\": \"2025-05-30T11:23:18.660371Z\",\n    \"permissions\": \"755\",\n    \"is_executable\": true,\n    \"mime_type\": \"application/octet-stream\",\n    \"hashes\": {\n      \"md5\": \"4871338882f462822f43567c58ccc767\",\n      \"sha256\": \"8e212d837edcda661104e7bde931d238a78c23776c0dd05866e042441784c618\",\n      \"sha512\": \"cffcdfeeab0a97726a89ea7d11a50d79673ba6685670fa459c294804aff89ac43f595ca21398811a41d60b2d5e8910b9478231393196465e77866b2591ccc444\",\n      \"blake3\": \"5d7d8c7c68250acc0c89e542bd3b95e60296c92e384bc1db9006f4feef23b30a\"\n    },\n    \"binary_info\": null,\n    \"extracted_strings\": null,\n    \"signature_info\": null,\n    \"hex_dump\": null,\n    \"owner_uid\": 1000,\n    \"group_gid\": 1000\n  },\n  \"hashes\": {\n    \"md5\": \"4871338882f462822f43567c58ccc767\",\n    \"sha256\": \"8e212d837edcda661104e7bde931d238a78c23776c0dd05866e042441784c618\",\n    \"sha512\": \"cffcdfeeab0a97726a89ea7d11a50d79673ba6685670fa459c294804aff89ac43f595ca21398811a41d60b2d5e8910b9478231393196465e77866b2591ccc444\",\n    \"blake3\": \"5d7d8c7c68250acc0c89e542bd3b95e60296c92e384bc1db9006f4feef23b30a\"\n  },\n  \"strings\": [\n    \"<?xml version=\\\"1.0\\\"?>\",\n    \"<doc>\",\n    \"    <assembly>\",\n    \"        <name>Prism</name>\",\n    \"    </assembly>\",\n    \"    <members>\",\n    \"        <member name=\\\"T:Prism.Commands.CompositeCommand\\\">\",\n    \"            <summary>\",\n    \"            The CompositeCommand composes one or more ICommands.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.CompositeCommand.#ctor\\\">\",\n    \"            <summary>\",\n    \"            Initializes a new instance of <see cref=\\\"T:Prism.Commands.CompositeCommand\\\"/>.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.CompositeCommand.#ctor(System.Boolean)\\\">\",\n    \"            <summary>\",\n    \"            Initializes a new instance of <see cref=\\\"T:Prism.Commands.CompositeCommand\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"monitorCommandActivity\\\">Indicates when the command activity is going to be monitored.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.CompositeCommand.RegisterCommand(System.Windows.Input.ICommand)\\\">\",\n    \"            <summary>\",\n    \"            Adds a command to the collection and signs up for the <see cref=\\\"E:System.Windows.Input.ICommand.CanExecuteChanged\\\"/> event of it.\",\n    \"            </summary>\",\n    \"             <remarks>\",\n    \"            If this command is set to monitor command activity, and <paramref name=\\\"command\\\"/> \",\n    \"            implements the <see cref=\\\"T:Prism.IActiveAware\\\"/> interface, this method will subscribe to its\",\n    \"            <see cref=\\\"E:Prism.IActiveAware.IsActiveChanged\\\"/> event.\",\n    \"            </remarks>\",\n    \"            <param name=\\\"command\\\">The command to register.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.CompositeCommand.UnregisterCommand(System.Windows.Input.ICommand)\\\">\",\n    \"            <summary>\",\n    \"            Removes a command from the collection and removes itself from the <see cref=\\\"E:System.Windows.Input.ICommand.CanExecuteChanged\\\"/> event of it.\",\n    \"            </summary>\",\n    \"            <param name=\\\"command\\\">The command to unregister.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.CompositeCommand.CanExecute(System.Object)\\\">\",\n    \"            <summary>\",\n    \"            Forwards <see cref=\\\"M:System.Windows.Input.ICommand.CanExecute(System.Object)\\\"/> to the registered commands and returns\",\n    \"            <see langword=\\\"true\\\" /> if all of the commands return <see langword=\\\"true\\\" />.\",\n    \"            </summary>\",\n    \"            <param name=\\\"parameter\\\">Data used by the command.\",\n    \"            If the command does not require data to be passed, this object can be set to <see langword=\\\"null\\\" />.\",\n    \"            </param>\",\n    \"            <returns><see langword=\\\"true\\\" /> if all of the commands return <see langword=\\\"true\\\" />; otherwise, <see langword=\\\"false\\\" />.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"E:Prism.Commands.CompositeCommand.CanExecuteChanged\\\">\",\n    \"            <summary>\",\n    \"            Occurs when any of the registered commands raise <see cref=\\\"E:System.Windows.Input.ICommand.CanExecuteChanged\\\"/>.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.CompositeCommand.Execute(System.Object)\\\">\",\n    \"            <summary>\",\n    \"            Forwards <see cref=\\\"M:System.Windows.Input.ICommand.Execute(System.Object)\\\"/> to the registered commands.\",\n    \"            </summary>\",\n    \"            <param name=\\\"parameter\\\">Data used by the command.\",\n    \"            If the command does not require data to be passed, this object can be set to <see langword=\\\"null\\\" />.\",\n    \"            </param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.CompositeCommand.ShouldExecute(System.Windows.Input.ICommand)\\\">\",\n    \"            <summary>\",\n    \"            Evaluates if a command should execute.\",\n    \"            </summary>\",\n    \"            <param name=\\\"command\\\">The command to evaluate.</param>\",\n    \"            <returns>A <see cref=\\\"T:System.Boolean\\\"/> value indicating whether the command should be used \",\n    \"            when evaluating <see cref=\\\"M:Prism.Commands.CompositeCommand.CanExecute(System.Object)\\\"/> and <see cref=\\\"M:Prism.Commands.CompositeCommand.Execute(System.Object)\\\"/>.</returns>\",\n    \"            <remarks>\",\n    \"            If this command is set to monitor command activity, and <paramref name=\\\"command\\\"/>\",\n    \"            implements the <see cref=\\\"T:Prism.IActiveAware\\\"/> interface, \",\n    \"            this method will return <see langword=\\\"false\\\" /> if the command's <see cref=\\\"P:Prism.IActiveAware.IsActive\\\"/> \",\n    \"            property is <see langword=\\\"false\\\" />; otherwise it always returns <see langword=\\\"true\\\" />.</remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Commands.CompositeCommand.RegisteredCommands\\\">\",\n    \"            <summary>\",\n    \"            Gets the list of all the registered commands.\",\n    \"            </summary>\",\n    \"            <value>A list of registered commands.</value>\",\n    \"            <remarks>This returns a copy of the commands subscribed to the CompositeCommand.</remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.CompositeCommand.OnCanExecuteChanged\\\">\",\n    \"            <summary>\",\n    \"            Raises <see cref=\\\"E:System.Windows.Input.ICommand.CanExecuteChanged\\\"/> on the UI thread so every \",\n    \"            command invoker can requery <see cref=\\\"M:System.Windows.Input.ICommand.CanExecute(System.Object)\\\"/> to check if the\",\n    \"            <see cref=\\\"T:Prism.Commands.CompositeCommand\\\"/> can execute.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.CompositeCommand.Command_IsActiveChanged(System.Object,System.EventArgs)\\\">\",\n    \"            <summary>\",\n    \"            Handler for IsActiveChanged events of registered commands.\",\n    \"            </summary>\",\n    \"            <param name=\\\"sender\\\">The sender.</param>\",\n    \"            <param name=\\\"e\\\">EventArgs to pass to the event.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Commands.DelegateCommand\\\">\",\n    \"            <summary>\",\n    \"            An <see cref=\\\"T:System.Windows.Input.ICommand\\\"/> whose delegates do not take any parameters for <see cref=\\\"M:Prism.Commands.DelegateCommand.Execute\\\"/> and <see cref=\\\"M:Prism.Commands.DelegateCommand.CanExecute\\\"/>.\",\n    \"            </summary>\",\n    \"            <see cref=\\\"T:Prism.Commands.DelegateCommandBase\\\"/>\",\n    \"            <see cref=\\\"T:Prism.Commands.DelegateCommand`1\\\"/>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommand.#ctor(System.Action)\\\">\",\n    \"            <summary>\",\n    \"            Creates a new instance of <see cref=\\\"T:Prism.Commands.DelegateCommand\\\"/> with the <see cref=\\\"T:System.Action\\\"/> to invoke on execution.\",\n    \"            </summary>\",\n    \"            <param name=\\\"executeMethod\\\">The <see cref=\\\"T:System.Action\\\"/> to invoke when <see cref=\\\"M:System.Windows.Input.ICommand.Execute(System.Object)\\\"/> is called.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})\\\">\",\n    \"            <summary>\",\n    \"            Creates a new instance of <see cref=\\\"T:Prism.Commands.DelegateCommand\\\"/> with the <see cref=\\\"T:System.Action\\\"/> to invoke on execution\",\n    \"            and a <see langword=\\\"Func\\\" /> to query for determining if the command can execute.\",\n    \"            </summary>\",\n    \"            <param name=\\\"executeMethod\\\">The <see cref=\\\"T:System.Action\\\"/> to invoke when <see cref=\\\"M:System.Windows.Input.ICommand.Execute(System.Object)\\\"/> is called.</param>\",\n    \"            <param name=\\\"canExecuteMethod\\\">The <see cref=\\\"T:System.Func`1\\\"/> to invoke when <see cref=\\\"M:System.Windows.Input.ICommand.CanExecute(System.Object)\\\"/> is called</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommand.Execute\\\">\",\n    \"            <summary>\",\n    \"             Executes the command.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommand.CanExecute\\\">\",\n    \"            <summary>\",\n    \"            Determines if the command can be executed.\",\n    \"            </summary>\",\n    \"            <returns>Returns <see langword=\\\"true\\\"/> if the command can execute,otherwise returns <see langword=\\\"false\\\"/>.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommand.Execute(System.Object)\\\">\",\n    \"            <summary>\",\n    \"            Handle the internal invocation of <see cref=\\\"M:System.Windows.Input.ICommand.Execute(System.Object)\\\"/>\",\n    \"            </summary>\",\n    \"            <param name=\\\"parameter\\\">Command Parameter</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommand.CanExecute(System.Object)\\\">\",\n    \"            <summary>\",\n    \"            Handle the internal invocation of <see cref=\\\"M:System.Windows.Input.ICommand.CanExecute(System.Object)\\\"/>\",\n    \"            </summary>\",\n    \"            <param name=\\\"parameter\\\"></param>\",\n    \"            <returns><see langword=\\\"true\\\"/> if the Command Can Execute, otherwise <see langword=\\\"false\\\" /></returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommand.ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})\\\">\",\n    \"            <summary>\",\n    \"            Observes a property that implements INotifyPropertyChanged, and automatically calls DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.\",\n    \"            </summary>\",\n    \"            <typeparam name=\\\"T\\\">The object type containing the property specified in the expression.</typeparam>\",\n    \"            <param name=\\\"propertyExpression\\\">The property expression. Example: ObservesProperty(() => PropertyName).</param>\",\n    \"            <returns>The current instance of DelegateCommand</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommand.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})\\\">\",\n    \"            <summary>\",\n    \"            Observes a property that is used to determine if this command can execute, and if it implements INotifyPropertyChanged it will automatically call DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.\",\n    \"            </summary>\",\n    \"            <param name=\\\"canExecuteExpression\\\">The property expression. Example: ObservesCanExecute(() => PropertyName).</param>\",\n    \"            <returns>The current instance of DelegateCommand</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Commands.DelegateCommandBase\\\">\",\n    \"            <summary>\",\n    \"            An <see cref=\\\"T:System.Windows.Input.ICommand\\\"/> whose delegates can be attached for <see cref=\\\"M:Prism.Commands.DelegateCommandBase.Execute(System.Object)\\\"/> and <see cref=\\\"M:Prism.Commands.DelegateCommandBase.CanExecute(System.Object)\\\"/>.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommandBase.#ctor\\\">\",\n    \"            <summary>\",\n    \"            Creates a new instance of a <see cref=\\\"T:Prism.Commands.DelegateCommandBase\\\"/>, specifying both the execute action and the can execute function.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"E:Prism.Commands.DelegateCommandBase.CanExecuteChanged\\\">\",\n    \"            <summary>\",\n    \"            Occurs when changes occur that affect whether or not the command should execute.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommandBase.OnCanExecuteChanged\\\">\",\n    \"            <summary>\",\n    \"            Raises <see cref=\\\"E:System.Windows.Input.ICommand.CanExecuteChanged\\\"/> so every \",\n    \"            command invoker can requery <see cref=\\\"M:System.Windows.Input.ICommand.CanExecute(System.Object)\\\"/>.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommandBase.RaiseCanExecuteChanged\\\">\",\n    \"            <summary>\",\n    \"            Raises <see cref=\\\"E:Prism.Commands.DelegateCommandBase.CanExecuteChanged\\\"/> so every command invoker\",\n    \"            can requery to check if the command can execute.\",\n    \"            </summary>\",\n    \"            <remarks>Note that this will trigger the execution of <see cref=\\\"E:Prism.Commands.DelegateCommandBase.CanExecuteChanged\\\"/> once for each invoker.</remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommandBase.Execute(System.Object)\\\">\",\n    \"            <summary>\",\n    \"            Handle the internal invocation of <see cref=\\\"M:System.Windows.Input.ICommand.Execute(System.Object)\\\"/>\",\n    \"            </summary>\",\n    \"            <param name=\\\"parameter\\\">Command Parameter</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommandBase.CanExecute(System.Object)\\\">\",\n    \"            <summary>\",\n    \"            Handle the internal invocation of <see cref=\\\"M:System.Windows.Input.ICommand.CanExecute(System.Object)\\\"/>\",\n    \"            </summary>\",\n    \"            <param name=\\\"parameter\\\"></param>\",\n    \"            <returns><see langword=\\\"true\\\"/> if the Command Can Execute, otherwise <see langword=\\\"false\\\" /></returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommandBase.ObservesPropertyInternal``1(System.Linq.Expressions.Expression{System.Func{``0}})\\\">\",\n    \"            <summary>\",\n    \"            Observes a property that implements INotifyPropertyChanged, and automatically calls DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.\",\n    \"            </summary>\",\n    \"            <typeparam name=\\\"T\\\">The object type containing the property specified in the expression.</typeparam>\",\n    \"            <param name=\\\"propertyExpression\\\">The property expression. Example: ObservesProperty(() => PropertyName).</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Commands.DelegateCommandBase.IsActive\\\">\",\n    \"            <summary>\",\n    \"            Gets or sets a value indicating whether the object is active.\",\n    \"            </summary>\",\n    \"            <value><see langword=\\\"true\\\" /> if the object is active; otherwise <see langword=\\\"false\\\" />.</value>\",\n    \"        </member>\",\n    \"        <member name=\\\"E:Prism.Commands.DelegateCommandBase.IsActiveChanged\\\">\",\n    \"            <summary>\",\n    \"            Fired if the <see cref=\\\"P:Prism.Commands.DelegateCommandBase.IsActive\\\"/> property changes.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommandBase.OnIsActiveChanged\\\">\",\n    \"            <summary>\",\n    \"            This raises the <see cref=\\\"E:Prism.Commands.DelegateCommandBase.IsActiveChanged\\\"/> event.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Commands.DelegateCommand`1\\\">\",\n    \"            <summary>\",\n    \"            An <see cref=\\\"T:System.Windows.Input.ICommand\\\"/> whose delegates can be attached for <see cref=\\\"M:Prism.Commands.DelegateCommand`1.Execute(`0)\\\"/> and <see cref=\\\"M:Prism.Commands.DelegateCommand`1.CanExecute(`0)\\\"/>.\",\n    \"            </summary>\",\n    \"            <typeparam name=\\\"T\\\">Parameter type.</typeparam>\",\n    \"            <remarks>\",\n    \"            The constructor deliberately prevents the use of value types.\",\n    \"            Because ICommand takes an object, having a value type for T would cause unexpected behavior when CanExecute(null) is called during XAML initialization for command bindings.\",\n    \"            Using default(T) was considered and rejected as a solution because the implementor would not be able to distinguish between a valid and defaulted values.\",\n    \"            <para/>\",\n    \"            Instead, callers should support a value type by using a nullable value type and checking the HasValue property before using the Value property.\",\n    \"            <example>\",\n    \"                <code>\",\n    \"            public MyClass()\",\n    \"            {\",\n    \"                this.submitCommand = new DelegateCommand&lt;int?&gt;(this.Submit, this.CanSubmit);\",\n    \"            }\",\n    \"            \",\n    \"            private bool CanSubmit(int? customerId)\",\n    \"            {\",\n    \"                return (customerId.HasValue &amp;&amp; customers.Contains(customerId.Value));\",\n    \"            }\",\n    \"                </code>\",\n    \"            </example>\",\n    \"            </remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommand`1.#ctor(System.Action{`0})\\\">\",\n    \"            <summary>\",\n    \"            Initializes a new instance of <see cref=\\\"T:Prism.Commands.DelegateCommand`1\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"executeMethod\\\">Delegate to execute when Execute is called on the command. This can be null to just hook up a CanExecute delegate.</param>\",\n    \"            <remarks><see cref=\\\"M:Prism.Commands.DelegateCommand`1.CanExecute(`0)\\\"/> will always return true.</remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})\\\">\",\n    \"            <summary>\",\n    \"            Initializes a new instance of <see cref=\\\"T:Prism.Commands.DelegateCommand`1\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"executeMethod\\\">Delegate to execute when Execute is called on the command. This can be null to just hook up a CanExecute delegate.</param>\",\n    \"            <param name=\\\"canExecuteMethod\\\">Delegate to execute when CanExecute is called on the command. This can be null.</param>\",\n    \"            <exception cref=\\\"T:System.ArgumentNullException\\\">When both <paramref name=\\\"executeMethod\\\"/> and <paramref name=\\\"canExecuteMethod\\\"/> are <see langword=\\\"null\\\" />.</exception>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommand`1.Execute(`0)\\\">\",\n    \"            <summary>\",\n    \"            Executes the command and invokes the <see cref=\\\"T:System.Action`1\\\"/> provided during construction.\",\n    \"            </summary>\",\n    \"            <param name=\\\"parameter\\\">Data used by the command.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommand`1.CanExecute(`0)\\\">\",\n    \"            <summary>\",\n    \"            Determines if the command can execute by invoked the <see cref=\\\"T:System.Func`2\\\"/> provided during construction.\",\n    \"            </summary>\",\n    \"            <param name=\\\"parameter\\\">Data used by the command to determine if it can execute.</param>\",\n    \"            <returns>\",\n    \"            <see langword=\\\"true\\\" /> if this command can be executed; otherwise, <see langword=\\\"false\\\" />.\",\n    \"            </returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommand`1.Execute(System.Object)\\\">\",\n    \"            <summary>\",\n    \"            Handle the internal invocation of <see cref=\\\"M:System.Windows.Input.ICommand.Execute(System.Object)\\\"/>\",\n    \"            </summary>\",\n    \"            <param name=\\\"parameter\\\">Command Parameter</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommand`1.CanExecute(System.Object)\\\">\",\n    \"            <summary>\",\n    \"            Handle the internal invocation of <see cref=\\\"M:System.Windows.Input.ICommand.CanExecute(System.Object)\\\"/>\",\n    \"            </summary>\",\n    \"            <param name=\\\"parameter\\\"></param>\",\n    \"            <returns><see langword=\\\"true\\\"/> if the Command Can Execute, otherwise <see langword=\\\"false\\\" /></returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommand`1.ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})\\\">\",\n    \"            <summary>\",\n    \"            Observes a property that implements INotifyPropertyChanged, and automatically calls DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.\",\n    \"            </summary>\",\n    \"            <typeparam name=\\\"TType\\\">The type of the return value of the method that this delegate encapulates</typeparam>\",\n    \"            <param name=\\\"propertyExpression\\\">The property expression. Example: ObservesProperty(() => PropertyName).</param>\",\n    \"            <returns>The current instance of DelegateCommand</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.DelegateCommand`1.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})\\\">\",\n    \"            <summary>\",\n    \"            Observes a property that is used to determine if this command can execute, and if it implements INotifyPropertyChanged it will automatically call DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.\",\n    \"            </summary>\",\n    \"            <param name=\\\"canExecuteExpression\\\">The property expression. Example: ObservesCanExecute(() => PropertyName).</param>\",\n    \"            <returns>The current instance of DelegateCommand</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Commands.PropertyObserver\\\">\",\n    \"            <summary>\",\n    \"            Provide a way to observe property changes of INotifyPropertyChanged objects and invokes a \",\n    \"            custom action when the PropertyChanged event is fired.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Commands.PropertyObserver.Observes``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Action)\\\">\",\n    \"            <summary>\",\n    \"            Observes a property that implements INotifyPropertyChanged, and automatically calls a custom action on \",\n    \"            property changed notifications. The given expression must be in this form: \\\"() => Prop.NestedProp.PropToObserve\\\".\",\n    \"            </summary>\",\n    \"            <param name=\\\"propertyExpression\\\">Expression representing property to be observed. Ex.: \\\"() => Prop.NestedProp.PropToObserve\\\".</param>\",\n    \"            <param name=\\\"action\\\">Action to be invoked when PropertyChanged event occours.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Commands.PropertyObserverNode\\\">\",\n    \"            <summary>\",\n    \"            Represents each node of nested properties expression and takes care of \",\n    \"            subscribing/unsubscribing INotifyPropertyChanged.PropertyChanged listeners on it.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Common.ListDictionary`2\\\">\",\n    \"            <summary>\",\n    \"            A dictionary of lists.\",\n    \"            </summary>\",\n    \"            <typeparam name=\\\"TKey\\\">The key to use for lists.</typeparam>\",\n    \"            <typeparam name=\\\"TValue\\\">The type of the value held by lists.</typeparam>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Common.ListDictionary`2.Add(`0)\\\">\",\n    \"            <summary>\",\n    \"            If a list does not already exist, it will be created automatically.\",\n    \"            </summary>\",\n    \"            <param name=\\\"key\\\">The key of the list that will hold the value.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Common.ListDictionary`2.Add(`0,`1)\\\">\",\n    \"            <summary>\",\n    \"            Adds a value to a list with the given key. If a list does not already exist,\",\n    \"            it will be created automatically.\",\n    \"            </summary>\",\n    \"            <param name=\\\"key\\\">The key of the list that will hold the value.</param>\",\n    \"            <param name=\\\"value\\\">The value to add to the list under the given key.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Common.ListDictionary`2.Clear\\\">\",\n    \"            <summary>\",\n    \"            Removes all entries in the dictionary.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Common.ListDictionary`2.ContainsValue(`1)\\\">\",\n    \"            <summary>\",\n    \"            Determines whether the dictionary contains the specified value.\",\n    \"            </summary>\",\n    \"            <param name=\\\"value\\\">The value to locate.</param>\",\n    \"            <returns>true if the dictionary contains the value in any list; otherwise, false.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Common.ListDictionary`2.ContainsKey(`0)\\\">\",\n    \"            <summary>\",\n    \"            Determines whether the dictionary contains the given key.\",\n    \"            </summary>\",\n    \"            <param name=\\\"key\\\">The key to locate.</param>\",\n    \"            <returns>true if the dictionary contains the given key; otherwise, false.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Common.ListDictionary`2.FindAllValuesByKey(System.Predicate{`0})\\\">\",\n    \"            <summary>\",\n    \"            Retrieves the all the elements from the list which have a key that matches the condition\",\n    \"            defined by the specified predicate.\",\n    \"            </summary>\",\n    \"            <param name=\\\"keyFilter\\\">The filter with the condition to use to filter lists by their key.</param>\",\n    \"            <returns>The elements that have a key that matches the condition defined by the specified predicate.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Common.ListDictionary`2.FindAllValues(System.Predicate{`1})\\\">\",\n    \"            <summary>\",\n    \"            Retrieves all the elements that match the condition defined by the specified predicate.\",\n    \"            </summary>\",\n    \"            <param name=\\\"valueFilter\\\">The filter with the condition to use to filter values.</param>\",\n    \"            <returns>The elements that match the condition defined by the specified predicate.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Common.ListDictionary`2.Remove(`0)\\\">\",\n    \"            <summary>\",\n    \"            Removes a list by key.\",\n    \"            </summary>\",\n    \"            <param name=\\\"key\\\">The key of the list to remove.</param>\",\n    \"            <returns><see langword=\\\"true\\\" /> if the element was removed.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Common.ListDictionary`2.RemoveValue(`0,`1)\\\">\",\n    \"            <summary>\",\n    \"            Removes a value from the list with the given key.\",\n    \"            </summary>\",\n    \"            <param name=\\\"key\\\">The key of the list where the value exists.</param>\",\n    \"            <param name=\\\"value\\\">The value to remove.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Common.ListDictionary`2.RemoveValue(`1)\\\">\",\n    \"            <summary>\",\n    \"            Removes a value from all lists where it may be found.\",\n    \"            </summary>\",\n    \"            <param name=\\\"value\\\">The value to remove.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Common.ListDictionary`2.Values\\\">\",\n    \"            <summary>\",\n    \"            Gets a shallow copy of all values in all lists.\",\n    \"            </summary>\",\n    \"            <value>List of values.</value>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Common.ListDictionary`2.Keys\\\">\",\n    \"            <summary>\",\n    \"            Gets the list of keys in the dictionary.\",\n    \"            </summary>\",\n    \"            <value>Collection of keys.</value>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Common.ListDictionary`2.Item(`0)\\\">\",\n    \"            <summary>\",\n    \"            Gets or sets the list associated with the given key. The\",\n    \"            access always succeeds, eventually returning an empty list.\",\n    \"            </summary>\",\n    \"            <param name=\\\"key\\\">The key of the list to access.</param>\",\n    \"            <returns>The list associated with the key.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Common.ListDictionary`2.Count\\\">\",\n    \"            <summary>\",\n    \"            Gets the number of lists in the dictionary.\",\n    \"            </summary>\",\n    \"            <value>Value indicating the values count.</value>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Common.ListDictionary`2.System#Collections#Generic#IDictionary{TKey,System#Collections#Generic#IList{TValue}}#Add(`0,System.Collections.Generic.IList{`1})\\\">\",\n    \"            <summary>\",\n    \"            See <see cref=\\\"M:System.Collections.Generic.IDictionary`2.Add(`0,`1)\\\"/> for more information.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Common.ListDictionary`2.System#Collections#Generic#IDictionary{TKey,System#Collections#Generic#IList{TValue}}#TryGetValue(`0,System.Collections.Generic.IList{`1}@)\\\">\",\n    \"            <summary>\",\n    \"            See <see cref=\\\"M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)\\\"/> for more information.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Common.ListDictionary`2.System#Collections#Generic#IDictionary{TKey,System#Collections#Generic#IList{TValue}}#Values\\\">\",\n    \"            <summary>\",\n    \"            See <see cref=\\\"P:System.Collections.Generic.IDictionary`2.Values\\\"/> for more information.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Common.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})\\\">\",\n    \"            <summary>\",\n    \"            See <see cref=\\\"M:System.Collections.Generic.ICollection`1.Add(`0)\\\"/> for more information.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Common.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})\\\">\",\n    \"            <summary>\",\n    \"            See <see cref=\\\"M:System.Collections.Generic.ICollection`1.Contains(`0)\\\"/> for more information.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Common.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}[],System.Int32)\\\">\",\n    \"            <summary>\",\n    \"            See <see cref=\\\"M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\\\"/> for more information.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Common.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#IsReadOnly\\\">\",\n    \"            <summary>\",\n    \"            See <see cref=\\\"P:System.Collections.Generic.ICollection`1.IsReadOnly\\\"/> for more information.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Common.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})\\\">\",\n    \"            <summary>\",\n    \"            See <see cref=\\\"M:System.Collections.Generic.ICollection`1.Remove(`0)\\\"/> for more information.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Common.ListDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#IList{TValue}}}#GetEnumerator\\\">\",\n    \"            <summary>\",\n    \"            See <see cref=\\\"M:System.Collections.Generic.IEnumerable`1.GetEnumerator\\\"/> for more information.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Common.ListDictionary`2.System#Collections#IEnumerable#GetEnumerator\\\">\",\n    \"            <summary>\",\n    \"            See <see cref=\\\"M:System.Collections.IEnumerable.GetEnumerator\\\"/> for more information.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Events.BackgroundEventSubscription\\\">\",\n    \"            <summary>\",\n    \"            Extends <see cref=\\\"T:Prism.Events.EventSubscription\\\"/> to invoke the <see cref=\\\"P:Prism.Events.EventSubscription.Action\\\"/> delegate in a background thread.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.BackgroundEventSubscription.#ctor(Prism.Events.IDelegateReference)\\\">\",\n    \"            <summary>\",\n    \"            Creates a new instance of <see cref=\\\"T:Prism.Events.BackgroundEventSubscription\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"actionReference\\\">A reference to a delegate of type <see cref=\\\"T:System.Action\\\"/>.</param>\",\n    \"            <exception cref=\\\"T:System.ArgumentNullException\\\">When <paramref name=\\\"actionReference\\\"/> or <see paramref=\\\"filterReference\\\"/> are <see langword=\\\"null\\\" />.</exception>\",\n    \"            <exception cref=\\\"T:System.ArgumentException\\\">When the target of <paramref name=\\\"actionReference\\\"/> is not of type <see cref=\\\"T:System.Action\\\"/>.</exception>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.BackgroundEventSubscription.InvokeAction(System.Action)\\\">\",\n    \"            <summary>\",\n    \"            Invokes the specified <see cref=\\\"T:System.Action\\\"/> in an asynchronous thread by using a <see cref=\\\"T:System.Threading.Tasks.Task\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"action\\\">The action to execute.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Events.BackgroundEventSubscription`1\\\">\",\n    \"            <summary>\",\n    \"            Extends <see cref=\\\"T:Prism.Events.EventSubscription`1\\\"/> to invoke the <see cref=\\\"P:Prism.Events.EventSubscription`1.Action\\\"/> delegate in a background thread.\",\n    \"            </summary>\",\n    \"            <typeparam name=\\\"TPayload\\\">The type to use for the generic <see cref=\\\"T:System.Action`1\\\"/> and <see cref=\\\"T:System.Predicate`1\\\"/> types.</typeparam>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.BackgroundEventSubscription`1.#ctor(Prism.Events.IDelegateReference,Prism.Events.IDelegateReference)\\\">\",\n    \"            <summary>\",\n    \"            Creates a new instance of <see cref=\\\"T:Prism.Events.BackgroundEventSubscription`1\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"actionReference\\\">A reference to a delegate of type <see cref=\\\"T:System.Action`1\\\"/>.</param>\",\n    \"            <param name=\\\"filterReference\\\">A reference to a delegate of type <see cref=\\\"T:System.Predicate`1\\\"/>.</param>\",\n    \"            <exception cref=\\\"T:System.ArgumentNullException\\\">When <paramref name=\\\"actionReference\\\"/> or <see paramref=\\\"filterReference\\\"/> are <see langword=\\\"null\\\" />.</exception>\",\n    \"            <exception cref=\\\"T:System.ArgumentException\\\">When the target of <paramref name=\\\"actionReference\\\"/> is not of type <see cref=\\\"T:System.Action`1\\\"/>,\",\n    \"            or the target of <paramref name=\\\"filterReference\\\"/> is not of type <see cref=\\\"T:System.Predicate`1\\\"/>.</exception>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.BackgroundEventSubscription`1.InvokeAction(System.Action{`0},`0)\\\">\",\n    \"            <summary>\",\n    \"            Invokes the specified <see cref=\\\"T:System.Action`1\\\"/> in an asynchronous thread by using a <see cref=\\\"!:ThreadPool\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"action\\\">The action to execute.</param>\",\n    \"            <param name=\\\"argument\\\">The payload to pass <paramref name=\\\"action\\\"/> while invoking it.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Events.DataEventArgs`1\\\">\",\n    \"            <summary>\",\n    \"            Generic arguments class to pass to event handlers that need to receive data.\",\n    \"            </summary>\",\n    \"            <typeparam name=\\\"TData\\\">The type of data to pass.</typeparam>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.DataEventArgs`1.#ctor(`0)\\\">\",\n    \"            <summary>\",\n    \"            Initializes the DataEventArgs class.\",\n    \"            </summary>\",\n    \"            <param name=\\\"value\\\">Information related to the event.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Events.DataEventArgs`1.Value\\\">\",\n    \"            <summary>\",\n    \"            Gets the information related to the event.\",\n    \"            </summary>\",\n    \"            <value>Information related to the event.</value>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Events.DelegateReference\\\">\",\n    \"            <summary>\",\n    \"            Represents a reference to a <see cref=\\\"T:System.Delegate\\\"/> that may contain a\",\n    \"            <see cref=\\\"T:System.WeakReference\\\"/> to the target. This class is used\",\n    \"            internally by the Prism Library.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.DelegateReference.#ctor(System.Delegate,System.Boolean)\\\">\",\n    \"            <summary>\",\n    \"            Initializes a new instance of <see cref=\\\"T:Prism.Events.DelegateReference\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"delegate\\\">The original <see cref=\\\"T:System.Delegate\\\"/> to create a reference for.</param>\",\n    \"            <param name=\\\"keepReferenceAlive\\\">If <see langword=\\\"false\\\" /> the class will create a weak reference to the delegate, allowing it to be garbage collected. Otherwise it will keep a strong reference to the target.</param>\",\n    \"            <exception cref=\\\"T:System.ArgumentNullException\\\">If the passed <paramref name=\\\"delegate\\\"/> is not assignable to <see cref=\\\"T:System.Delegate\\\"/>.</exception>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Events.DelegateReference.Target\\\">\",\n    \"            <summary>\",\n    \"            Gets the <see cref=\\\"T:System.Delegate\\\" /> (the target) referenced by the current <see cref=\\\"T:Prism.Events.DelegateReference\\\"/> object.\",\n    \"            </summary>\",\n    \"            <value><see langword=\\\"null\\\"/> if the object referenced by the current <see cref=\\\"T:Prism.Events.DelegateReference\\\"/> object has been garbage collected; otherwise, a reference to the <see cref=\\\"T:System.Delegate\\\"/> referenced by the current <see cref=\\\"T:Prism.Events.DelegateReference\\\"/> object.</value>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.DelegateReference.TargetEquals(System.Delegate)\\\">\",\n    \"            <summary>\",\n    \"            Checks if the <see cref=\\\"T:System.Delegate\\\" /> (the target) referenced by the current <see cref=\\\"T:Prism.Events.DelegateReference\\\"/> object are equal to another <see cref=\\\"T:System.Delegate\\\" />.\",\n    \"            This is equivalent with comparing <see cref=\\\"P:Prism.Events.DelegateReference.Target\\\"/> with <paramref name=\\\"delegate\\\"/>, only more efficient.\",\n    \"            </summary>\",\n    \"            <param name=\\\"delegate\\\">The other delegate to compare with.</param>\",\n    \"            <returns>True if the target referenced by the current object are equal to <paramref name=\\\"delegate\\\"/>.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Events.DispatcherEventSubscription\\\">\",\n    \"            <summary>\",\n    \"             Extends <see cref=\\\"T:Prism.Events.EventSubscription\\\"/> to invoke the <see cref=\\\"P:Prism.Events.EventSubscription.Action\\\"/> delegate\",\n    \"             in a specific <see cref=\\\"T:System.Threading.SynchronizationContext\\\"/>.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.DispatcherEventSubscription.#ctor(Prism.Events.IDelegateReference,System.Threading.SynchronizationContext)\\\">\",\n    \"            <summary>\",\n    \"             Creates a new instance of <see cref=\\\"T:Prism.Events.BackgroundEventSubscription\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"actionReference\\\">A reference to a delegate of type <see cref=\\\"T:System.Action`1\\\"/>.</param>\",\n    \"            <param name=\\\"context\\\">The synchronization context to use for UI thread dispatching.</param>\",\n    \"            <exception cref=\\\"T:System.ArgumentNullException\\\">When <paramref name=\\\"actionReference\\\"/> or <see paramref=\\\"filterReference\\\"/> are <see langword=\\\"null\\\" />.</exception>\",\n    \"            <exception cref=\\\"T:System.ArgumentException\\\">When the target of <paramref name=\\\"actionReference\\\"/> is not of type <see cref=\\\"T:System.Action`1\\\"/>.</exception>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.DispatcherEventSubscription.InvokeAction(System.Action)\\\">\",\n    \"            <summary>\",\n    \"            Invokes the specified <see cref=\\\"T:System.Action`1\\\"/> asynchronously in the specified <see cref=\\\"T:System.Threading.SynchronizationContext\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"action\\\">The action to execute.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Events.DispatcherEventSubscription`1\\\">\",\n    \"            <summary>\",\n    \"             Extends <see cref=\\\"T:Prism.Events.EventSubscription`1\\\"/> to invoke the <see cref=\\\"P:Prism.Events.EventSubscription`1.Action\\\"/> delegate\",\n    \"             in a specific <see cref=\\\"T:System.Threading.SynchronizationContext\\\"/>.\",\n    \"            </summary>\",\n    \"             <typeparam name=\\\"TPayload\\\">The type to use for the generic <see cref=\\\"T:System.Action`1\\\"/> and <see cref=\\\"T:System.Predicate`1\\\"/> types.</typeparam>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.DispatcherEventSubscription`1.#ctor(Prism.Events.IDelegateReference,Prism.Events.IDelegateReference,System.Threading.SynchronizationContext)\\\">\",\n    \"            <summary>\",\n    \"             Creates a new instance of <see cref=\\\"T:Prism.Events.BackgroundEventSubscription`1\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"actionReference\\\">A reference to a delegate of type <see cref=\\\"T:System.Action`1\\\"/>.</param>\",\n    \"            <param name=\\\"filterReference\\\">A reference to a delegate of type <see cref=\\\"T:System.Predicate`1\\\"/>.</param>\",\n    \"            <param name=\\\"context\\\">The synchronization context to use for UI thread dispatching.</param>\",\n    \"            <exception cref=\\\"T:System.ArgumentNullException\\\">When <paramref name=\\\"actionReference\\\"/> or <see paramref=\\\"filterReference\\\"/> are <see langword=\\\"null\\\" />.</exception>\",\n    \"            <exception cref=\\\"T:System.ArgumentException\\\">When the target of <paramref name=\\\"actionReference\\\"/> is not of type <see cref=\\\"T:System.Action`1\\\"/>,\",\n    \"            or the target of <paramref name=\\\"filterReference\\\"/> is not of type <see cref=\\\"T:System.Predicate`1\\\"/>.</exception>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.DispatcherEventSubscription`1.InvokeAction(System.Action{`0},`0)\\\">\",\n    \"            <summary>\",\n    \"            Invokes the specified <see cref=\\\"T:System.Action`1\\\"/> asynchronously in the specified <see cref=\\\"T:System.Threading.SynchronizationContext\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"action\\\">The action to execute.</param>\",\n    \"            <param name=\\\"argument\\\">The payload to pass <paramref name=\\\"action\\\"/> while invoking it.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Events.EventAggregator\\\">\",\n    \"            <summary>\",\n    \"            Implements <see cref=\\\"T:Prism.Events.IEventAggregator\\\"/>.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.EventAggregator.GetEvent``1\\\">\",\n    \"            <summary>\",\n    \"            Gets the single instance of the event managed by this EventAggregator. Multiple calls to this method with the same <typeparamref name=\\\"TEventType\\\"/> returns the same event instance.\",\n    \"            </summary>\",\n    \"            <typeparam name=\\\"TEventType\\\">The type of event to get. This must inherit from <see cref=\\\"T:Prism.Events.EventBase\\\"/>.</typeparam>\",\n    \"            <returns>A singleton instance of an event object of type <typeparamref name=\\\"TEventType\\\"/>.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Events.EventBase\\\">\",\n    \"            <summary>\",\n    \"             Defines a base class to publish and subscribe to events.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Events.EventBase.SynchronizationContext\\\">\",\n    \"            <summary>\",\n    \"            Allows the SynchronizationContext to be set by the EventAggregator for UI Thread Dispatching\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Events.EventBase.Subscriptions\\\">\",\n    \"            <summary>\",\n    \"            Gets the list of current subscriptions.\",\n    \"            </summary>\",\n    \"            <value>The current subscribers.</value>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.EventBase.InternalSubscribe(Prism.Events.IEventSubscription)\\\">\",\n    \"            <summary>\",\n    \"            Adds the specified <see cref=\\\"T:Prism.Events.IEventSubscription\\\"/> to the subscribers' collection.\",\n    \"            </summary>\",\n    \"            <param name=\\\"eventSubscription\\\">The subscriber.</param>\",\n    \"            <returns>The <see cref=\\\"T:Prism.Events.SubscriptionToken\\\"/> that uniquely identifies every subscriber.</returns>\",\n    \"            <remarks>\",\n    \"            Adds the subscription to the internal list and assigns it a new <see cref=\\\"T:Prism.Events.SubscriptionToken\\\"/>.\",\n    \"            </remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.EventBase.InternalPublish(System.Object[])\\\">\",\n    \"            <summary>\",\n    \"            Calls all the execution strategies exposed by the list of <see cref=\\\"T:Prism.Events.IEventSubscription\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"arguments\\\">The arguments that will be passed to the listeners.</param>\",\n    \"            <remarks>Before executing the strategies, this class will prune all the subscribers from the\",\n    \"            list that return a <see langword=\\\"null\\\" /> <see cref=\\\"T:System.Action`1\\\"/> when calling the\",\n    \"            <see cref=\\\"M:Prism.Events.IEventSubscription.GetExecutionStrategy\\\"/> method.</remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.EventBase.Unsubscribe(Prism.Events.SubscriptionToken)\\\">\",\n    \"            <summary>\",\n    \"            Removes the subscriber matching the <see cref=\\\"T:Prism.Events.SubscriptionToken\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"token\\\">The <see cref=\\\"T:Prism.Events.SubscriptionToken\\\"/> returned by <see cref=\\\"T:Prism.Events.EventBase\\\"/> while subscribing to the event.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.EventBase.Contains(Prism.Events.SubscriptionToken)\\\">\",\n    \"            <summary>\",\n    \"            Returns <see langword=\\\"true\\\"/> if there is a subscriber matching <see cref=\\\"T:Prism.Events.SubscriptionToken\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"token\\\">The <see cref=\\\"T:Prism.Events.SubscriptionToken\\\"/> returned by <see cref=\\\"T:Prism.Events.EventBase\\\"/> while subscribing to the event.</param>\",\n    \"            <returns><see langword=\\\"true\\\"/> if there is a <see cref=\\\"T:Prism.Events.SubscriptionToken\\\"/> that matches; otherwise <see langword=\\\"false\\\"/>.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.EventBase.Prune\\\">\",\n    \"            <summary>\",\n    \"            Forces the PubSubEvent to remove any subscriptions that no longer have an execution strategy.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Events.EventSubscription\\\">\",\n    \"            <summary>\",\n    \"            Provides a way to retrieve a <see cref=\\\"T:System.Delegate\\\"/> to execute an action depending\",\n    \"            on the value of a second filter predicate that returns true if the action should execute.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.EventSubscription.#ctor(Prism.Events.IDelegateReference)\\\">\",\n    \"            <summary>\",\n    \"             Creates a new instance of <see cref=\\\"T:Prism.Events.EventSubscription\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"actionReference\\\">A reference to a delegate of type <see cref=\\\"T:System.Action\\\"/>.</param>\",\n    \"            <exception cref=\\\"T:System.ArgumentNullException\\\">When <paramref name=\\\"actionReference\\\"/> or <see paramref=\\\"filterReference\\\"/> are <see langword=\\\"null\\\" />.</exception>\",\n    \"            <exception cref=\\\"T:System.ArgumentException\\\">When the target of <paramref name=\\\"actionReference\\\"/> is not of type <see cref=\\\"T:System.Action\\\"/>.</exception>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Events.EventSubscription.Action\\\">\",\n    \"            <summary>\",\n    \"            Gets the target <see cref=\\\"T:System.Action\\\"/> that is referenced by the <see cref=\\\"T:Prism.Events.IDelegateReference\\\"/>.\",\n    \"            </summary>\",\n    \"            <value>An <see cref=\\\"T:System.Action\\\"/> or <see langword=\\\"null\\\" /> if the referenced target is not alive.</value>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Events.EventSubscription.SubscriptionToken\\\">\",\n    \"            <summary>\",\n    \"            Gets or sets a <see cref=\\\"P:Prism.Events.EventSubscription.SubscriptionToken\\\"/> that identifies this <see cref=\\\"T:Prism.Events.IEventSubscription\\\"/>.\",\n    \"            </summary>\",\n    \"            <value>A token that identifies this <see cref=\\\"T:Prism.Events.IEventSubscription\\\"/>.</value>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.EventSubscription.GetExecutionStrategy\\\">\",\n    \"            <summary>\",\n    \"            Gets the execution strategy to publish this event.\",\n    \"            </summary>\",\n    \"            <returns>An <see cref=\\\"T:System.Action\\\"/> with the execution strategy, or <see langword=\\\"null\\\" /> if the <see cref=\\\"T:Prism.Events.IEventSubscription\\\"/> is no longer valid.</returns>\",\n    \"            <remarks>\",\n    \"            If <see cref=\\\"P:Prism.Events.EventSubscription.Action\\\"/>is no longer valid because it was\",\n    \"            garbage collected, this method will return <see langword=\\\"null\\\" />.\",\n    \"            Otherwise it will return a delegate that evaluates the <see cref=\\\"!:Filter\\\"/> and if it\",\n    \"            returns <see langword=\\\"true\\\" /> will then call <see cref=\\\"M:Prism.Events.EventSubscription.InvokeAction(System.Action)\\\"/>. The returned\",\n    \"            delegate holds a hard reference to the <see cref=\\\"P:Prism.Events.EventSubscription.Action\\\"/> target\",\n    \"            <see cref=\\\"T:System.Delegate\\\">delegates</see>. As long as the returned delegate is not garbage collected,\",\n    \"            the <see cref=\\\"P:Prism.Events.EventSubscription.Action\\\"/> references delegates won't get collected either.\",\n    \"            </remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.EventSubscription.InvokeAction(System.Action)\\\">\",\n    \"            <summary>\",\n    \"            Invokes the specified <see cref=\\\"T:System.Action`1\\\"/> synchronously when not overridden.\",\n    \"            </summary>\",\n    \"            <param name=\\\"action\\\">The action to execute.</param>\",\n    \"            <exception cref=\\\"T:System.ArgumentNullException\\\">An <see cref=\\\"T:System.ArgumentNullException\\\"/> is thrown if <paramref name=\\\"action\\\"/> is null.</exception>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Events.EventSubscription`1\\\">\",\n    \"            <summary>\",\n    \"            Provides a way to retrieve a <see cref=\\\"T:System.Delegate\\\"/> to execute an action depending\",\n    \"            on the value of a second filter predicate that returns true if the action should execute.\",\n    \"            </summary>\",\n    \"            <typeparam name=\\\"TPayload\\\">The type to use for the generic <see cref=\\\"T:System.Action`1\\\"/> and <see cref=\\\"T:System.Predicate`1\\\"/> types.</typeparam>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.EventSubscription`1.#ctor(Prism.Events.IDelegateReference,Prism.Events.IDelegateReference)\\\">\",\n    \"            <summary>\",\n    \"             Creates a new instance of <see cref=\\\"T:Prism.Events.EventSubscription`1\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"actionReference\\\">A reference to a delegate of type <see cref=\\\"T:System.Action`1\\\"/>.</param>\",\n    \"            <param name=\\\"filterReference\\\">A reference to a delegate of type <see cref=\\\"T:System.Predicate`1\\\"/>.</param>\",\n    \"            <exception cref=\\\"T:System.ArgumentNullException\\\">When <paramref name=\\\"actionReference\\\"/> or <see paramref=\\\"filterReference\\\"/> are <see langword=\\\"null\\\" />.</exception>\",\n    \"            <exception cref=\\\"T:System.ArgumentException\\\">When the target of <paramref name=\\\"actionReference\\\"/> is not of type <see cref=\\\"T:System.Action`1\\\"/>,\",\n    \"            or the target of <paramref name=\\\"filterReference\\\"/> is not of type <see cref=\\\"T:System.Predicate`1\\\"/>.</exception>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Events.EventSubscription`1.Action\\\">\",\n    \"            <summary>\",\n    \"            Gets the target <see cref=\\\"T:System.Action`1\\\"/> that is referenced by the <see cref=\\\"T:Prism.Events.IDelegateReference\\\"/>.\",\n    \"            </summary>\",\n    \"            <value>An <see cref=\\\"T:System.Action`1\\\"/> or <see langword=\\\"null\\\" /> if the referenced target is not alive.</value>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Events.EventSubscription`1.Filter\\\">\",\n    \"            <summary>\",\n    \"            Gets the target <see cref=\\\"T:System.Predicate`1\\\"/> that is referenced by the <see cref=\\\"T:Prism.Events.IDelegateReference\\\"/>.\",\n    \"            </summary>\",\n    \"            <value>An <see cref=\\\"T:System.Predicate`1\\\"/> or <see langword=\\\"null\\\" /> if the referenced target is not alive.</value>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Events.EventSubscription`1.SubscriptionToken\\\">\",\n    \"            <summary>\",\n    \"            Gets or sets a <see cref=\\\"P:Prism.Events.EventSubscription`1.SubscriptionToken\\\"/> that identifies this <see cref=\\\"T:Prism.Events.IEventSubscription\\\"/>.\",\n    \"            </summary>\",\n    \"            <value>A token that identifies this <see cref=\\\"T:Prism.Events.IEventSubscription\\\"/>.</value>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.EventSubscription`1.GetExecutionStrategy\\\">\",\n    \"            <summary>\",\n    \"            Gets the execution strategy to publish this event.\",\n    \"            </summary>\",\n    \"            <returns>An <see cref=\\\"T:System.Action`1\\\"/> with the execution strategy, or <see langword=\\\"null\\\" /> if the <see cref=\\\"T:Prism.Events.IEventSubscription\\\"/> is no longer valid.</returns>\",\n    \"            <remarks>\",\n    \"            If <see cref=\\\"P:Prism.Events.EventSubscription`1.Action\\\"/> or <see cref=\\\"P:Prism.Events.EventSubscription`1.Filter\\\"/> are no longer valid because they were\",\n    \"            garbage collected, this method will return <see langword=\\\"null\\\" />.\",\n    \"            Otherwise it will return a delegate that evaluates the <see cref=\\\"P:Prism.Events.EventSubscription`1.Filter\\\"/> and if it\",\n    \"            returns <see langword=\\\"true\\\" /> will then call <see cref=\\\"M:Prism.Events.EventSubscription`1.InvokeAction(System.Action{`0},`0)\\\"/>. The returned\",\n    \"            delegate holds hard references to the <see cref=\\\"P:Prism.Events.EventSubscription`1.Action\\\"/> and <see cref=\\\"P:Prism.Events.EventSubscription`1.Filter\\\"/> target\",\n    \"            <see cref=\\\"T:System.Delegate\\\">delegates</see>. As long as the returned delegate is not garbage collected,\",\n    \"            the <see cref=\\\"P:Prism.Events.EventSubscription`1.Action\\\"/> and <see cref=\\\"P:Prism.Events.EventSubscription`1.Filter\\\"/> references delegates won't get collected either.\",\n    \"            </remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.EventSubscription`1.InvokeAction(System.Action{`0},`0)\\\">\",\n    \"            <summary>\",\n    \"            Invokes the specified <see cref=\\\"T:System.Action`1\\\"/> synchronously when not overridden.\",\n    \"            </summary>\",\n    \"            <param name=\\\"action\\\">The action to execute.</param>\",\n    \"            <param name=\\\"argument\\\">The payload to pass <paramref name=\\\"action\\\"/> while invoking it.</param>\",\n    \"            <exception cref=\\\"T:System.ArgumentNullException\\\">An <see cref=\\\"T:System.ArgumentNullException\\\"/> is thrown if <paramref name=\\\"action\\\"/> is null.</exception>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Events.IDelegateReference\\\">\",\n    \"            <summary>\",\n    \"            Represents a reference to a <see cref=\\\"T:System.Delegate\\\"/>.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Events.IDelegateReference.Target\\\">\",\n    \"            <summary>\",\n    \"            Gets the referenced <see cref=\\\"T:System.Delegate\\\" /> object.\",\n    \"            </summary>\",\n    \"            <value>A <see cref=\\\"T:System.Delegate\\\"/> instance if the target is valid; otherwise <see langword=\\\"null\\\"/>.</value>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Events.IEventAggregator\\\">\",\n    \"            <summary>\",\n    \"            Defines an interface to get instances of an event type.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.IEventAggregator.GetEvent``1\\\">\",\n    \"            <summary>\",\n    \"            Gets an instance of an event type.\",\n    \"            </summary>\",\n    \"            <typeparam name=\\\"TEventType\\\">The type of event to get.</typeparam>\",\n    \"            <returns>An instance of an event object of type <typeparamref name=\\\"TEventType\\\"/>.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Events.IEventSubscription\\\">\",\n    \"            <summary>\",\n    \"             Defines a contract for an event subscription to be used by <see cref=\\\"T:Prism.Events.EventBase\\\"/>.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"P:Prism.Events.IEventSubscription.SubscriptionToken\\\">\",\n    \"            <summary>\",\n    \"            Gets or sets a <see cref=\\\"P:Prism.Events.IEventSubscription.SubscriptionToken\\\"/> that identifies this <see cref=\\\"T:Prism.Events.IEventSubscription\\\"/>.\",\n    \"            </summary>\",\n    \"            <value>A token that identifies this <see cref=\\\"T:Prism.Events.IEventSubscription\\\"/>.</value>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.IEventSubscription.GetExecutionStrategy\\\">\",\n    \"            <summary>\",\n    \"            Gets the execution strategy to publish this event.\",\n    \"            </summary>\",\n    \"            <returns>An <see cref=\\\"T:System.Action`1\\\"/> with the execution strategy, or <see langword=\\\"null\\\" /> if the <see cref=\\\"T:Prism.Events.IEventSubscription\\\"/> is no longer valid.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Events.PubSubEvent\\\">\",\n    \"            <summary>\",\n    \"            Defines a class that manages publication and subscription to events.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.PubSubEvent.Subscribe(System.Action)\\\">\",\n    \"            <summary>\",\n    \"            Subscribes a delegate to an event that will be published on the <see cref=\\\"F:Prism.Events.ThreadOption.PublisherThread\\\"/>.\",\n    \"            <see cref=\\\"T:Prism.Events.PubSubEvent\\\"/> will maintain a <see cref=\\\"T:System.WeakReference\\\"/> to the target of the supplied <paramref name=\\\"action\\\"/> delegate.\",\n    \"            </summary>\",\n    \"            <param name=\\\"action\\\">The delegate that gets executed when the event is published.</param>\",\n    \"            <returns>A <see cref=\\\"T:Prism.Events.SubscriptionToken\\\"/> that uniquely identifies the added subscription.</returns>\",\n    \"            <remarks>\",\n    \"            The PubSubEvent collection is thread-safe.\",\n    \"            </remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.PubSubEvent.Subscribe(System.Action,Prism.Events.ThreadOption)\\\">\",\n    \"            <summary>\",\n    \"            Subscribes a delegate to an event.\",\n    \"            PubSubEvent will maintain a <see cref=\\\"T:System.WeakReference\\\"/> to the Target of the supplied <paramref name=\\\"action\\\"/> delegate.\",\n    \"            </summary>\",\n    \"            <param name=\\\"action\\\">The delegate that gets executed when the event is raised.</param>\",\n    \"            <param name=\\\"threadOption\\\">Specifies on which thread to receive the delegate callback.</param>\",\n    \"            <returns>A <see cref=\\\"T:Prism.Events.SubscriptionToken\\\"/> that uniquely identifies the added subscription.</returns>\",\n    \"            <remarks>\",\n    \"            The PubSubEvent collection is thread-safe.\",\n    \"            </remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.PubSubEvent.Subscribe(System.Action,System.Boolean)\\\">\",\n    \"            <summary>\",\n    \"            Subscribes a delegate to an event that will be published on the <see cref=\\\"F:Prism.Events.ThreadOption.PublisherThread\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"action\\\">The delegate that gets executed when the event is published.</param>\",\n    \"            <param name=\\\"keepSubscriberReferenceAlive\\\">When <see langword=\\\"true\\\"/>, the <see cref=\\\"T:Prism.Events.PubSubEvent\\\"/> keeps a reference to the subscriber so it does not get garbage collected.</param>\",\n    \"            <returns>A <see cref=\\\"T:Prism.Events.SubscriptionToken\\\"/> that uniquely identifies the added subscription.</returns>\",\n    \"            <remarks>\",\n    \"            If <paramref name=\\\"keepSubscriberReferenceAlive\\\"/> is set to <see langword=\\\"false\\\" />, <see cref=\\\"T:Prism.Events.PubSubEvent\\\"/> will maintain a <see cref=\\\"T:System.WeakReference\\\"/> to the Target of the supplied <paramref name=\\\"action\\\"/> delegate.\",\n    \"            If not using a WeakReference (<paramref name=\\\"keepSubscriberReferenceAlive\\\"/> is <see langword=\\\"true\\\" />), the user must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexpected behavior.\",\n    \"            <para/>\",\n    \"            The PubSubEvent collection is thread-safe.\",\n    \"            </remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.PubSubEvent.Subscribe(System.Action,Prism.Events.ThreadOption,System.Boolean)\\\">\",\n    \"            <summary>\",\n    \"            Subscribes a delegate to an event.\",\n    \"            </summary>\",\n    \"            <param name=\\\"action\\\">The delegate that gets executed when the event is published.</param>\",\n    \"            <param name=\\\"threadOption\\\">Specifies on which thread to receive the delegate callback.</param>\",\n    \"            <param name=\\\"keepSubscriberReferenceAlive\\\">When <see langword=\\\"true\\\"/>, the <see cref=\\\"T:Prism.Events.PubSubEvent\\\"/> keeps a reference to the subscriber so it does not get garbage collected.</param>\",\n    \"            <returns>A <see cref=\\\"T:Prism.Events.SubscriptionToken\\\"/> that uniquely identifies the added subscription.</returns>\",\n    \"            <remarks>\",\n    \"            If <paramref name=\\\"keepSubscriberReferenceAlive\\\"/> is set to <see langword=\\\"false\\\" />, <see cref=\\\"T:Prism.Events.PubSubEvent\\\"/> will maintain a <see cref=\\\"T:System.WeakReference\\\"/> to the Target of the supplied <paramref name=\\\"action\\\"/> delegate.\",\n    \"            If not using a WeakReference (<paramref name=\\\"keepSubscriberReferenceAlive\\\"/> is <see langword=\\\"true\\\" />), the user must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexpected behavior.\",\n    \"            <para/>\",\n    \"            The PubSubEvent collection is thread-safe.\",\n    \"            </remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.PubSubEvent.Publish\\\">\",\n    \"            <summary>\",\n    \"            Publishes the <see cref=\\\"T:Prism.Events.PubSubEvent\\\"/>.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.PubSubEvent.Unsubscribe(System.Action)\\\">\",\n    \"            <summary>\",\n    \"            Removes the first subscriber matching <see cref=\\\"T:System.Action\\\"/> from the subscribers' list.\",\n    \"            </summary>\",\n    \"            <param name=\\\"subscriber\\\">The <see cref=\\\"T:System.Action\\\"/> used when subscribing to the event.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.PubSubEvent.Contains(System.Action)\\\">\",\n    \"            <summary>\",\n    \"            Returns <see langword=\\\"true\\\"/> if there is a subscriber matching <see cref=\\\"T:System.Action\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"subscriber\\\">The <see cref=\\\"T:System.Action\\\"/> used when subscribing to the event.</param>\",\n    \"            <returns><see langword=\\\"true\\\"/> if there is an <see cref=\\\"T:System.Action\\\"/> that matches; otherwise <see langword=\\\"false\\\"/>.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Events.PubSubEvent`1\\\">\",\n    \"            <summary>\",\n    \"            Defines a class that manages publication and subscription to events.\",\n    \"            </summary>\",\n    \"            <typeparam name=\\\"TPayload\\\">The type of message that will be passed to the subscribers.</typeparam>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.PubSubEvent`1.Subscribe(System.Action{`0})\\\">\",\n    \"            <summary>\",\n    \"            Subscribes a delegate to an event that will be published on the <see cref=\\\"F:Prism.Events.ThreadOption.PublisherThread\\\"/>.\",\n    \"            <see cref=\\\"T:Prism.Events.PubSubEvent`1\\\"/> will maintain a <see cref=\\\"T:System.WeakReference\\\"/> to the target of the supplied <paramref name=\\\"action\\\"/> delegate.\",\n    \"            </summary>\",\n    \"            <param name=\\\"action\\\">The delegate that gets executed when the event is published.</param>\",\n    \"            <returns>A <see cref=\\\"T:Prism.Events.SubscriptionToken\\\"/> that uniquely identifies the added subscription.</returns>\",\n    \"            <remarks>\",\n    \"            The PubSubEvent collection is thread-safe.\",\n    \"            </remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.PubSubEvent`1.Subscribe(System.Action{`0},Prism.Events.ThreadOption)\\\">\",\n    \"            <summary>\",\n    \"            Subscribes a delegate to an event.\",\n    \"            PubSubEvent will maintain a <see cref=\\\"T:System.WeakReference\\\"/> to the Target of the supplied <paramref name=\\\"action\\\"/> delegate.\",\n    \"            </summary>\",\n    \"            <param name=\\\"action\\\">The delegate that gets executed when the event is raised.</param>\",\n    \"            <param name=\\\"threadOption\\\">Specifies on which thread to receive the delegate callback.</param>\",\n    \"            <returns>A <see cref=\\\"T:Prism.Events.SubscriptionToken\\\"/> that uniquely identifies the added subscription.</returns>\",\n    \"            <remarks>\",\n    \"            The PubSubEvent collection is thread-safe.\",\n    \"            </remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.PubSubEvent`1.Subscribe(System.Action{`0},System.Boolean)\\\">\",\n    \"            <summary>\",\n    \"            Subscribes a delegate to an event that will be published on the <see cref=\\\"F:Prism.Events.ThreadOption.PublisherThread\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"action\\\">The delegate that gets executed when the event is published.</param>\",\n    \"            <param name=\\\"keepSubscriberReferenceAlive\\\">When <see langword=\\\"true\\\"/>, the <see cref=\\\"T:Prism.Events.PubSubEvent`1\\\"/> keeps a reference to the subscriber so it does not get garbage collected.</param>\",\n    \"            <returns>A <see cref=\\\"T:Prism.Events.SubscriptionToken\\\"/> that uniquely identifies the added subscription.</returns>\",\n    \"            <remarks>\",\n    \"            If <paramref name=\\\"keepSubscriberReferenceAlive\\\"/> is set to <see langword=\\\"false\\\" />, <see cref=\\\"T:Prism.Events.PubSubEvent`1\\\"/> will maintain a <see cref=\\\"T:System.WeakReference\\\"/> to the Target of the supplied <paramref name=\\\"action\\\"/> delegate.\",\n    \"            If not using a WeakReference (<paramref name=\\\"keepSubscriberReferenceAlive\\\"/> is <see langword=\\\"true\\\" />), the user must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexpected behavior.\",\n    \"            <para/>\",\n    \"            The PubSubEvent collection is thread-safe.\",\n    \"            </remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.PubSubEvent`1.Subscribe(System.Action{`0},Prism.Events.ThreadOption,System.Boolean)\\\">\",\n    \"            <summary>\",\n    \"            Subscribes a delegate to an event.\",\n    \"            </summary>\",\n    \"            <param name=\\\"action\\\">The delegate that gets executed when the event is published.</param>\",\n    \"            <param name=\\\"threadOption\\\">Specifies on which thread to receive the delegate callback.</param>\",\n    \"            <param name=\\\"keepSubscriberReferenceAlive\\\">When <see langword=\\\"true\\\"/>, the <see cref=\\\"T:Prism.Events.PubSubEvent`1\\\"/> keeps a reference to the subscriber so it does not get garbage collected.</param>\",\n    \"            <returns>A <see cref=\\\"T:Prism.Events.SubscriptionToken\\\"/> that uniquely identifies the added subscription.</returns>\",\n    \"            <remarks>\",\n    \"            If <paramref name=\\\"keepSubscriberReferenceAlive\\\"/> is set to <see langword=\\\"false\\\" />, <see cref=\\\"T:Prism.Events.PubSubEvent`1\\\"/> will maintain a <see cref=\\\"T:System.WeakReference\\\"/> to the Target of the supplied <paramref name=\\\"action\\\"/> delegate.\",\n    \"            If not using a WeakReference (<paramref name=\\\"keepSubscriberReferenceAlive\\\"/> is <see langword=\\\"true\\\" />), the user must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexpected behavior.\",\n    \"            <para/>\",\n    \"            The PubSubEvent collection is thread-safe.\",\n    \"            </remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.PubSubEvent`1.Subscribe(System.Action{`0},Prism.Events.ThreadOption,System.Boolean,System.Predicate{`0})\\\">\",\n    \"             <summary>\",\n    \"             Subscribes a delegate to an event.\",\n    \"             </summary>\",\n    \"             <param name=\\\"action\\\">The delegate that gets executed when the event is published.</param>\",\n    \"             <param name=\\\"threadOption\\\">Specifies on which thread to receive the delegate callback.</param>\",\n    \"             <param name=\\\"keepSubscriberReferenceAlive\\\">When <see langword=\\\"true\\\"/>, the <see cref=\\\"T:Prism.Events.PubSubEvent`1\\\"/> keeps a reference to the subscriber so it does not get garbage collected.</param>\",\n    \"             <param name=\\\"filter\\\">Filter to evaluate if the subscriber should receive the event.</param>\",\n    \"             <returns>A <see cref=\\\"T:Prism.Events.SubscriptionToken\\\"/> that uniquely identifies the added subscription.</returns>\",\n    \"             <remarks>\",\n    \"             If <paramref name=\\\"keepSubscriberReferenceAlive\\\"/> is set to <see langword=\\\"false\\\" />, <see cref=\\\"T:Prism.Events.PubSubEvent`1\\\"/> will maintain a <see cref=\\\"T:System.WeakReference\\\"/> to the Target of the supplied <paramref name=\\\"action\\\"/> delegate.\",\n    \"             If not using a WeakReference (<paramref name=\\\"keepSubscriberReferenceAlive\\\"/> is <see langword=\\\"true\\\" />), the user must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexpected behavior.\",\n    \"            \",\n    \"             The PubSubEvent collection is thread-safe.\",\n    \"             </remarks>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.PubSubEvent`1.Publish(`0)\\\">\",\n    \"            <summary>\",\n    \"            Publishes the <see cref=\\\"T:Prism.Events.PubSubEvent`1\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"payload\\\">Message to pass to the subscribers.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.PubSubEvent`1.Unsubscribe(System.Action{`0})\\\">\",\n    \"            <summary>\",\n    \"            Removes the first subscriber matching <see cref=\\\"T:System.Action`1\\\"/> from the subscribers' list.\",\n    \"            </summary>\",\n    \"            <param name=\\\"subscriber\\\">The <see cref=\\\"T:System.Action`1\\\"/> used when subscribing to the event.</param>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.PubSubEvent`1.Contains(System.Action{`0})\\\">\",\n    \"            <summary>\",\n    \"            Returns <see langword=\\\"true\\\"/> if there is a subscriber matching <see cref=\\\"T:System.Action`1\\\"/>.\",\n    \"            </summary>\",\n    \"            <param name=\\\"subscriber\\\">The <see cref=\\\"T:System.Action`1\\\"/> used when subscribing to the event.</param>\",\n    \"            <returns><see langword=\\\"true\\\"/> if there is an <see cref=\\\"T:System.Action`1\\\"/> that matches; otherwise <see langword=\\\"false\\\"/>.</returns>\",\n    \"        </member>\",\n    \"        <member name=\\\"T:Prism.Events.SubscriptionToken\\\">\",\n    \"            <summary>\",\n    \"            Subscription token returned from <see cref=\\\"T:Prism.Events.EventBase\\\"/> on subscribe.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.SubscriptionToken.#ctor(System.Action{Prism.Events.SubscriptionToken})\\\">\",\n    \"            <summary>\",\n    \"            Initializes a new instance of <see cref=\\\"T:Prism.Events.SubscriptionToken\\\"/>.\",\n    \"            </summary>\",\n    \"        </member>\",\n    \"        <member name=\\\"M:Prism.Events.SubscriptionToken.Equals(Prism.Events.SubscriptionToken)\\\">\"\n  ],\n  \"hex_dump\": null,\n  \"binary_info\": null,\n  \"signatures\": null,\n  \"symbols\": null,\n  \"control_flow\": null,\n  \"vulnerabilities\": null,\n  \"code_quality\": null,\n  \"dependencies\": null,\n  \"entropy\": null,\n  \"disassembly\": null,\n  \"threats\": null,\n  \"behavioral\": null,\n  \"yara_indicators\": null\n}"}]}}

{"jsonrpc":"2.0","id":1,"result":{"content":[{"type":"text","text":"{\n  \"file_path\": \"/windows/Program Files (x86)/Steam/steamapps/common/EVGA PrecisionX/Library/System.Runtime.CompilerServices.Unsafe.xml\",\n  \"metadata\": {\n    \"file_path\": \"/windows/Program Files (x86)/Steam/steamapps/common/EVGA PrecisionX/Library/System.Runtime.CompilerServices.Unsafe.xml\",\n    \"file_name\": \"System.Runtime.CompilerServices.Unsafe.xml\",\n    \"file_size\": 17409,\n    \"created\": \"2023-03-21T18:54:15.596234800Z\",\n    \"modified\": \"2023-03-21T18:54:15.596234800Z\",\n    \"accessed\": \"2025-05-30T11:23:18.661370900Z\",\n    \"permissions\": \"755\",\n    \"is_executable\": true,\n    \"mime_type\": \"application/octet-stream\",\n    \"hashes\": {\n      \"md5\": \"c29c73470e15ffb2b70ced2e24f017b0\",\n      \"sha256\": \"1f30c6f175674466972a9c33f4e5b86d784ed23a279113c0817db0df0414db8c\",\n      \"sha512\": \"2302ac6e7f8c0cda386b3c44cc6335798e054cbe444d579b16bd8b4b4d2244d632291cff212848a9d5435abc368cffc7d2f8227e7e3533ebc9b227d55afb058f\",\n      \"blake3\": \"bc69571842f3c6a2d217acf99f7f91c00e5e46c9005c4f9a7ec3d5e96fe1c9bb\"\n    },\n    \"binary_info\": null,\n    \"extracted_strings\": null,\n    \"signature_info\": null,\n    \"hex_dump\": null,\n    \"owner_uid\": 1000,\n    \"group_gid\": 1000\n  },\n  \"hashes\": {\n    \"md5\": \"c29c73470e15ffb2b70ced2e24f017b0\",\n    \"sha256\": \"1f30c6f175674466972a9c33f4e5b86d784ed23a279113c0817db0df0414db8c\",\n    \"sha512\": \"2302ac6e7f8c0cda386b3c44cc6335798e054cbe444d579b16bd8b4b4d2244d632291cff212848a9d5435abc368cffc7d2f8227e7e3533ebc9b227d55afb058f\",\n    \"blake3\": \"bc69571842f3c6a2d217acf99f7f91c00e5e46c9005c4f9a7ec3d5e96fe1c9bb\"\n  },\n  \"strings\": [\n    \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\",\n    \"<doc>\",\n    \"  <assembly>\",\n    \"    <name>System.Runtime.CompilerServices.Unsafe</name>\",\n    \"  </assembly>\",\n    \"  <members>\",\n    \"    <member name=\\\"T:System.Runtime.CompilerServices.Unsafe\\\">\",\n    \"      <summary>Contains generic, low-level functionality for manipulating pointers.</summary>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.Int32)\\\">\",\n    \"      <summary>Adds an element offset to the given reference.</summary>\",\n    \"      <param name=\\\"source\\\">The reference to add the offset to.</param>\",\n    \"      <param name=\\\"elementOffset\\\">The offset to add.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type of reference.</typeparam>\",\n    \"      <returns>A new reference that reflects the addition of offset to pointer.</returns>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.IntPtr)\\\">\",\n    \"      <summary>Adds an element offset to the given reference.</summary>\",\n    \"      <param name=\\\"source\\\">The reference to add the offset to.</param>\",\n    \"      <param name=\\\"elementOffset\\\">The offset to add.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type of reference.</typeparam>\",\n    \"      <returns>A new reference that reflects the addition of offset to pointer.</returns>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.Add``1(System.Void*,System.Int32)\\\">\",\n    \"      <summary>Adds an element offset to the given void pointer.</summary>\",\n    \"      <param name=\\\"source\\\">The void pointer to add the offset to.</param>\",\n    \"      <param name=\\\"elementOffset\\\">The offset to add.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type of void pointer.</typeparam>\",\n    \"      <returns>A new void pointer that reflects the addition of offset to the specified pointer.</returns>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.IntPtr)\\\">\",\n    \"      <summary>Adds a byte offset to the given reference.</summary>\",\n    \"      <param name=\\\"source\\\">The reference to add the offset to.</param>\",\n    \"      <param name=\\\"byteOffset\\\">The offset to add.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type of reference.</typeparam>\",\n    \"      <returns>A new reference that reflects the addition of byte offset to pointer.</returns>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.AreSame``1(``0@,``0@)\\\">\",\n    \"      <summary>Determines whether the specified references point to the same location.</summary>\",\n    \"      <param name=\\\"left\\\">The first reference to compare.</param>\",\n    \"      <param name=\\\"right\\\">The second reference to compare.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type of reference.</typeparam>\",\n    \"      <returns>\",\n    \"        <see langword=\\\"true\\\" /> if <paramref name=\\\"left\\\" /> and <paramref name=\\\"right\\\" /> point to the same location; otherwise, <see langword=\\\"false\\\" />.</returns>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.As``1(System.Object)\\\">\",\n    \"      <summary>Casts the given object to the specified type.</summary>\",\n    \"      <param name=\\\"o\\\">The object to cast.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type which the object will be cast to.</typeparam>\",\n    \"      <returns>The original object, casted to the given type.</returns>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.As``2(``0@)\\\">\",\n    \"      <summary>Reinterprets the given reference as a reference to a value of type <typeparamref name=\\\"TTo\\\" />.</summary>\",\n    \"      <param name=\\\"source\\\">The reference to reinterpret.</param>\",\n    \"      <typeparam name=\\\"TFrom\\\">The type of reference to reinterpret.</typeparam>\",\n    \"      <typeparam name=\\\"TTo\\\">The desired type of the reference.</typeparam>\",\n    \"      <returns>A reference to a value of type <typeparamref name=\\\"TTo\\\" />.</returns>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.AsPointer``1(``0@)\\\">\",\n    \"      <summary>Returns a pointer to the given by-ref parameter.</summary>\",\n    \"      <param name=\\\"value\\\">The object whose pointer is obtained.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type of object.</typeparam>\",\n    \"      <returns>A pointer to the given value.</returns>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.AsRef``1(``0@)\\\">\",\n    \"      <summary>Reinterprets the given read-only reference as a reference.</summary>\",\n    \"      <param name=\\\"source\\\">The read-only reference to reinterpret.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type of reference.</typeparam>\",\n    \"      <returns>A reference to a value of type <typeparamref name=\\\"T\\\" />.</returns>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.AsRef``1(System.Void*)\\\">\",\n    \"      <summary>Reinterprets the given location as a reference to a value of type <typeparamref name=\\\"T\\\" />.</summary>\",\n    \"      <param name=\\\"source\\\">The location of the value to reference.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type of the interpreted location.</typeparam>\",\n    \"      <returns>A reference to a value of type <typeparamref name=\\\"T\\\" />.</returns>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.ByteOffset``1(``0@,``0@)\\\">\",\n    \"      <summary>Determines the byte offset from origin to target from the given references.</summary>\",\n    \"      <param name=\\\"origin\\\">The reference to origin.</param>\",\n    \"      <param name=\\\"target\\\">The reference to target.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type of reference.</typeparam>\",\n    \"      <returns>Byte offset from origin to target i.e. <paramref name=\\\"target\\\" /> - <paramref name=\\\"origin\\\" />.</returns>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.Copy``1(``0@,System.Void*)\\\">\",\n    \"      <summary>Copies a value of type <typeparamref name=\\\"T\\\" /> to the given location.</summary>\",\n    \"      <param name=\\\"destination\\\">The location to copy to.</param>\",\n    \"      <param name=\\\"source\\\">A pointer to the value to copy.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type of value to copy.</typeparam>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.Copy``1(System.Void*,``0@)\\\">\",\n    \"      <summary>Copies a value of type <typeparamref name=\\\"T\\\" /> to the given location.</summary>\",\n    \"      <param name=\\\"destination\\\">The location to copy to.</param>\",\n    \"      <param name=\\\"source\\\">A reference to the value to copy.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type of value to copy.</typeparam>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Byte@,System.Byte@,System.UInt32)\\\">\",\n    \"      <summary>Copies bytes from the source address to the destination address.</summary>\",\n    \"      <param name=\\\"destination\\\">The destination address to copy to.</param>\",\n    \"      <param name=\\\"source\\\">The source address to copy from.</param>\",\n    \"      <param name=\\\"byteCount\\\">The number of bytes to copy.</param>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Void*,System.Void*,System.UInt32)\\\">\",\n    \"      <summary>Copies bytes from the source address to the destination address.</summary>\",\n    \"      <param name=\\\"destination\\\">The destination address to copy to.</param>\",\n    \"      <param name=\\\"source\\\">The source address to copy from.</param>\",\n    \"      <param name=\\\"byteCount\\\">The number of bytes to copy.</param>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Byte@,System.Byte@,System.UInt32)\\\">\",\n    \"      <summary>Copies bytes from the source address to the destination address \",\n    \"without assuming architecture dependent alignment of the addresses.</summary>\",\n    \"      <param name=\\\"destination\\\">The destination address to copy to.</param>\",\n    \"      <param name=\\\"source\\\">The source address to copy from.</param>\",\n    \"      <param name=\\\"byteCount\\\">The number of bytes to copy.</param>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Void*,System.Void*,System.UInt32)\\\">\",\n    \"      <summary>Copies bytes from the source address to the destination address \",\n    \"without assuming architecture dependent alignment of the addresses.</summary>\",\n    \"      <param name=\\\"destination\\\">The destination address to copy to.</param>\",\n    \"      <param name=\\\"source\\\">The source address to copy from.</param>\",\n    \"      <param name=\\\"byteCount\\\">The number of bytes to copy.</param>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Byte@,System.Byte,System.UInt32)\\\">\",\n    \"      <summary>Initializes a block of memory at the given location with a given initial value.</summary>\",\n    \"      <param name=\\\"startAddress\\\">The address of the start of the memory block to initialize.</param>\",\n    \"      <param name=\\\"value\\\">The value to initialize the block to.</param>\",\n    \"      <param name=\\\"byteCount\\\">The number of bytes to initialize.</param>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Void*,System.Byte,System.UInt32)\\\">\",\n    \"      <summary>Initializes a block of memory at the given location with a given initial value.</summary>\",\n    \"      <param name=\\\"startAddress\\\">The address of the start of the memory block to initialize.</param>\",\n    \"      <param name=\\\"value\\\">The value to initialize the block to.</param>\",\n    \"      <param name=\\\"byteCount\\\">The number of bytes to initialize.</param>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Byte@,System.Byte,System.UInt32)\\\">\",\n    \"      <summary>Initializes a block of memory at the given location with a given initial value \",\n    \"without assuming architecture dependent alignment of the address.</summary>\",\n    \"      <param name=\\\"startAddress\\\">The address of the start of the memory block to initialize.</param>\",\n    \"      <param name=\\\"value\\\">The value to initialize the block to.</param>\",\n    \"      <param name=\\\"byteCount\\\">The number of bytes to initialize.</param>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Void*,System.Byte,System.UInt32)\\\">\",\n    \"      <summary>Initializes a block of memory at the given location with a given initial value \",\n    \"without assuming architecture dependent alignment of the address.</summary>\",\n    \"      <param name=\\\"startAddress\\\">The address of the start of the memory block to initialize.</param>\",\n    \"      <param name=\\\"value\\\">The value to initialize the block to.</param>\",\n    \"      <param name=\\\"byteCount\\\">The number of bytes to initialize.</param>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.IsAddressGreaterThan``1(``0@,``0@)\\\">\",\n    \"      <summary>Returns a value that indicates whether a specified reference is greater than another specified reference.</summary>\",\n    \"      <param name=\\\"left\\\">The first value to compare.</param>\",\n    \"      <param name=\\\"right\\\">The second value to compare.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type of the reference.</typeparam>\",\n    \"      <returns>\",\n    \"        <see langword=\\\"true\\\" /> if <paramref name=\\\"left\\\" /> is greater than <paramref name=\\\"right\\\" />; otherwise, <see langword=\\\"false\\\" />.</returns>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.IsAddressLessThan``1(``0@,``0@)\\\">\",\n    \"      <summary>Returns a value that indicates whether a specified reference is less than another specified reference.</summary>\",\n    \"      <param name=\\\"left\\\">The first value to compare.</param>\",\n    \"      <param name=\\\"right\\\">The second value to compare.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type of the reference.</typeparam>\",\n    \"      <returns>\",\n    \"        <see langword=\\\"true\\\" /> if <paramref name=\\\"left\\\" /> is less than <paramref name=\\\"right\\\" />; otherwise, <see langword=\\\"false\\\" />.</returns>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.Read``1(System.Void*)\\\">\",\n    \"      <summary>Reads a value of type <typeparamref name=\\\"T\\\" /> from the given location.</summary>\",\n    \"      <param name=\\\"source\\\">The location to read from.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type to read.</typeparam>\",\n    \"      <returns>An object of type <typeparamref name=\\\"T\\\" /> read from the given location.</returns>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Byte@)\\\">\",\n    \"      <summary>Reads a value of type <typeparamref name=\\\"T\\\" /> from the given location\",\n    \"without assuming architecture dependent alignment of the addresses.</summary>\",\n    \"      <param name=\\\"source\\\">The location to read from.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type to read.</typeparam>\",\n    \"      <returns>An object of type <typeparamref name=\\\"T\\\" /> read from the given location.</returns>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Void*)\\\">\",\n    \"      <summary>Reads a value of type <typeparamref name=\\\"T\\\" /> from the given location\",\n    \"without assuming architecture dependent alignment of the addresses.</summary>\",\n    \"      <param name=\\\"source\\\">The location to read from.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type to read.</typeparam>\",\n    \"      <returns>An object of type <typeparamref name=\\\"T\\\" /> read from the given location.</returns>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.SizeOf``1\\\">\",\n    \"      <summary>Returns the size of an object of the given type parameter.</summary>\",\n    \"      <typeparam name=\\\"T\\\">The type of object whose size is retrieved.</typeparam>\",\n    \"      <returns>The size of an object of type <typeparamref name=\\\"T\\\" />.</returns>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.Int32)\\\">\",\n    \"      <summary>Subtracts an element offset from the given reference.</summary>\",\n    \"      <param name=\\\"source\\\">The reference to subtract the offset from.</param>\",\n    \"      <param name=\\\"elementOffset\\\">The offset to subtract.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type of reference.</typeparam>\",\n    \"      <returns>A new reference that reflects the subtraction of offset from pointer.</returns>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.IntPtr)\\\">\",\n    \"      <summary>Subtracts an element offset from the given reference.</summary>\",\n    \"      <param name=\\\"source\\\">The reference to subtract the offset from.</param>\",\n    \"      <param name=\\\"elementOffset\\\">The offset to subtract.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type of reference.</typeparam>\",\n    \"      <returns>A new reference that reflects the subtraction of offset from pointer.</returns>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.Subtract``1(System.Void*,System.Int32)\\\">\",\n    \"      <summary>Subtracts an element offset from the given void pointer.</summary>\",\n    \"      <param name=\\\"source\\\">The void pointer to subtract the offset from.</param>\",\n    \"      <param name=\\\"elementOffset\\\">The offset to subtract.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type of the void pointer.</typeparam>\",\n    \"      <returns>A new void pointer that reflects the subtraction of offset from the specified pointer.</returns>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.IntPtr)\\\">\",\n    \"      <summary>Subtracts a byte offset from the given reference.</summary>\",\n    \"      <param name=\\\"source\\\">The reference to subtract the offset from.</param>\",\n    \"      <param name=\\\"byteOffset\\\">The offset to subtract.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type of reference.</typeparam>\",\n    \"      <returns>A new reference that reflects the subtraction of byte offset from pointer.</returns>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.Unbox``1(System.Object)\\\">\",\n    \"      <summary>Returns a <see langword=\\\"mutable ref\\\" /> to a boxed value.</summary>\",\n    \"      <param name=\\\"box\\\">The value to unbox.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type to be unboxed.</typeparam>\",\n    \"      <returns>A <see langword=\\\"mutable ref\\\" /> to the boxed value <paramref name=\\\"box\\\" />.</returns>\",\n    \"      <exception cref=\\\"T:System.NullReferenceException\\\">\",\n    \"        <paramref name=\\\"box\\\" /> is <see langword=\\\"null\\\" />, and <typeparamref name=\\\"T\\\" /> is a non-nullable value type.</exception>\",\n    \"      <exception cref=\\\"T:System.InvalidCastException\\\">\",\n    \"        <paramref name=\\\"box\\\" /> is not a boxed value type.\",\n    \"-or-\",\n    \"<paramref name=\\\"box\\\" /> is not a boxed <typeparamref name=\\\"T\\\" />.</exception>\",\n    \"      <exception cref=\\\"T:System.TypeLoadException\\\">\",\n    \"        <typeparamref name=\\\"T\\\" /> cannot be found.</exception>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.Write``1(System.Void*,``0)\\\">\",\n    \"      <summary>Writes a value of type <typeparamref name=\\\"T\\\" /> to the given location.</summary>\",\n    \"      <param name=\\\"destination\\\">The location to write to.</param>\",\n    \"      <param name=\\\"value\\\">The value to write.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type of value to write.</typeparam>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Byte@,``0)\\\">\",\n    \"      <summary>Writes a value of type <typeparamref name=\\\"T\\\" /> to the given location\",\n    \"without assuming architecture dependent alignment of the addresses.</summary>\",\n    \"      <param name=\\\"destination\\\">The location to write to.</param>\",\n    \"      <param name=\\\"value\\\">The value to write.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type of value to write.</typeparam>\",\n    \"    </member>\",\n    \"    <member name=\\\"M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Void*,``0)\\\">\",\n    \"      <summary>Writes a value of type <typeparamref name=\\\"T\\\" /> to the given location\",\n    \"without assuming architecture dependent alignment of the addresses.</summary>\",\n    \"      <param name=\\\"destination\\\">The location to write to.</param>\",\n    \"      <param name=\\\"value\\\">The value to write.</param>\",\n    \"      <typeparam name=\\\"T\\\">The type of value to write.</typeparam>\",\n    \"    </member>\",\n    \"  </members>\",\n    \"</doc>\"\n  ],\n  \"hex_dump\": null,\n  \"binary_info\": null,\n  \"signatures\": null,\n  \"symbols\": null,\n  \"control_flow\": null,\n  \"vulnerabilities\": null,\n  \"code_quality\": null,\n  \"dependencies\": null,\n  \"entropy\": null,\n  \"disassembly\": null,\n  \"threats\": null,\n  \"behavioral\": null,\n  \"yara_indicators\": null\n}"}]}}
